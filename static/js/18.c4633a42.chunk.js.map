{"version":3,"sources":["components/shared-components/EllipsisDropdown/index.tsx","../node_modules/@ant-design/icons-svg/es/asn/MailOutlined.js","../node_modules/@ant-design/icons/es/icons/MailOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/ArrowRightOutlined.js","../node_modules/@ant-design/icons/es/icons/ArrowRightOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/MobileOutlined.js","../node_modules/@ant-design/icons/es/icons/MobileOutlined.js","views/app-views/catalog/users/index.tsx","views/app-views/catalog/users/UserView.tsx","components/shared-components/AvatarStatus/index.tsx","views/app-views/catalog/users/UserModalEdit.tsx","views/app-views/catalog/users/UserModalAdd.tsx"],"names":["EllipsisDropdown","menu","placement","overlay","trigger","className","props","ref","AntdIcon","Object","assign","icon","displayName","status","UserView","this","data","visible","close","width","onClose","closable","size","src","Photo","UserOutlined","FirstName","LastName","dashed","ID","ApartmentOutlined","CompanyID","PhoneNumber","MailOutlined","Email","Component","AvatarStatus","name","suffix","subTitle","id","type","shape","gap","text","onNameClick","onClick","UserModalEdit","onCancel","getUsersInfo","Form","useForm","form","useEffect","resetFields","updateUser","AppService","UpdateUser","destroyOnClose","title","okText","IntlMessage","onOk","validateFields","then","values","message","loading","content","TranslateText","UPDATING","key","setTimeout","a","User","ErrorCode","success","DONE","onFinish","layout","initialValues","gutter","ROW_GUTTER","xs","sm","md","Item","label","rules","required","UserModalAdd","useState","setLoading","AuthService","RegisterUser","UiLanguage","registerUser","confirmLoading","UserList","state","users","usersToSearch","selectedRows","selectedKeys","userProfileVisible","selectedUser","isHidden","editModalVisible","newUserModalVisible","registerUserModalVisible","instance","GetUserList","setState","filteredUsers","Users","filter","user","evaluatedArray","Utils","sortData","reverse","showUserProfile","userInfo","closeUserViewProfile","showEditModal","closeEditModal","showNewUserModal","closeNewUserModal","toggleStatusRow","row","statusNumber","Modal","confirm","length","Promise","all","map","elm","handleUserStatus","userId","ChangeUserStatus","dropdownMenu","Status","sendActivationCode","Flex","alignItems","EyeOutlined","EditOutlined","disabled","active","CheckCircleOutlined","CloseCircleOutlined","onSearch","e","value","currentTarget","searchArray","wildCardSearch","_source","cancel","tableColumns","dataIndex","render","_","record","LastAuthorize","moment","unix","slice","format","color","mobileFlex","justifyContent","placeholder","prefix","SearchOutlined","onChange","PlusCircleOutlined","block","columns","dataSource","rowKey","rowSelection","rows","selectedRowKeys","preserveSelectedRowKeys","connect","auth","theme","account","token","locale"],"mappings":"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","file":"static/js/18.c4633a42.chunk.js","sourcesContent":["import React from \"react\";\nimport { Dropdown, Menu } from \"antd\";\nimport { EllipsisOutlined } from \"@ant-design/icons\";\nexport interface IEllipsisDropdown {\n    menu: any;\n    placement?: any;\n}\nconst EllipsisDropdown = ({\n    menu = <Menu />,\n    placement = \"bottomRight\",\n}: IEllipsisDropdown) => {\n    return (\n        <Dropdown overlay={menu} placement={placement} trigger={[\"click\"]}>\n            <div className=\"ellipsis-dropdown\">\n                <EllipsisOutlined />\n            </div>\n        </Dropdown>\n    );\n};\n\n// EllipsisDropdown.propTypes = {\n//     trigger: PropTypes.string,\n//     placement: PropTypes.string,\n// };\n\n// EllipsisDropdown.defaultProps = {\n//     trigger: \"click\",\n//     placement: \"bottomRight\",\n//     menu: <Menu />,\n// };\n\nexport default EllipsisDropdown;\n","// This icon file is generated automatically.\nvar MailOutlined = {\n  \"icon\": {\n    \"tag\": \"svg\",\n    \"attrs\": {\n      \"viewBox\": \"64 64 896 896\",\n      \"focusable\": \"false\"\n    },\n    \"children\": [{\n      \"tag\": \"path\",\n      \"attrs\": {\n        \"d\": \"M928 160H96c-17.7 0-32 14.3-32 32v640c0 17.7 14.3 32 32 32h832c17.7 0 32-14.3 32-32V192c0-17.7-14.3-32-32-32zm-40 110.8V792H136V270.8l-27.6-21.5 39.3-50.5 42.8 33.3h643.1l42.8-33.3 39.3 50.5-27.7 21.5zM833.6 232L512 482 190.4 232l-42.8-33.3-39.3 50.5 27.6 21.5 341.6 265.6a55.99 55.99 0 0068.7 0L888 270.8l27.6-21.5-39.3-50.5-42.7 33.2z\"\n      }\n    }]\n  },\n  \"name\": \"mail\",\n  \"theme\": \"outlined\"\n};\nexport default MailOutlined;","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MailOutlinedSvg from \"@ant-design/icons-svg/es/asn/MailOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MailOutlined = function MailOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: MailOutlinedSvg\n  }));\n};\n\nMailOutlined.displayName = 'MailOutlined';\nexport default React.forwardRef(MailOutlined);","// This icon file is generated automatically.\nvar ArrowRightOutlined = {\n  \"icon\": {\n    \"tag\": \"svg\",\n    \"attrs\": {\n      \"viewBox\": \"64 64 896 896\",\n      \"focusable\": \"false\"\n    },\n    \"children\": [{\n      \"tag\": \"path\",\n      \"attrs\": {\n        \"d\": \"M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 000-48.4z\"\n      }\n    }]\n  },\n  \"name\": \"arrow-right\",\n  \"theme\": \"outlined\"\n};\nexport default ArrowRightOutlined;","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ArrowRightOutlinedSvg from \"@ant-design/icons-svg/es/asn/ArrowRightOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ArrowRightOutlined = function ArrowRightOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: ArrowRightOutlinedSvg\n  }));\n};\n\nArrowRightOutlined.displayName = 'ArrowRightOutlined';\nexport default React.forwardRef(ArrowRightOutlined);","// This icon file is generated automatically.\nvar MobileOutlined = {\n  \"icon\": {\n    \"tag\": \"svg\",\n    \"attrs\": {\n      \"viewBox\": \"64 64 896 896\",\n      \"focusable\": \"false\"\n    },\n    \"children\": [{\n      \"tag\": \"path\",\n      \"attrs\": {\n        \"d\": \"M744 62H280c-35.3 0-64 28.7-64 64v768c0 35.3 28.7 64 64 64h464c35.3 0 64-28.7 64-64V126c0-35.3-28.7-64-64-64zm-8 824H288V134h448v752zM472 784a40 40 0 1080 0 40 40 0 10-80 0z\"\n      }\n    }]\n  },\n  \"name\": \"mobile\",\n  \"theme\": \"outlined\"\n};\nexport default MobileOutlined;","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport MobileOutlinedSvg from \"@ant-design/icons-svg/es/asn/MobileOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar MobileOutlined = function MobileOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: MobileOutlinedSvg\n  }));\n};\n\nMobileOutlined.displayName = 'MobileOutlined';\nexport default React.forwardRef(MobileOutlined);","import React, { Component } from \"react\";\nimport { Card, Table, Tag, Button, Modal, Menu, Input } from \"antd\";\nimport {\n  EyeOutlined,\n  ArrowRightOutlined,\n  PlusCircleOutlined,\n  EditOutlined,\n  SearchOutlined,\n  CloseCircleOutlined,\n  CheckCircleOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport moment from \"moment\";\nimport UserView from \"./UserView\";\nimport AvatarStatus from \"../../../../components/shared-components/AvatarStatus\";\nimport { connect } from \"react-redux\";\nimport { UserModalEdit } from \"./UserModalEdit\";\nimport { UserModalAdd } from \"./UserModalAdd\";\nimport Utils from \"../../../../utils\";\nimport Flex from \"../../../../components/shared-components/Flex\";\nimport EllipsisDropdown from \"../../../../components/shared-components/EllipsisDropdown\";\nimport { AppService } from \"../../../../api\";\nimport { sendActivationCode } from \"../../../../redux/actions/Auth\";\nimport IntlMessage from \"../../../../components/util-components/IntlMessage\";\nimport { IState } from \"../../../../redux/reducers\";\nimport { IAuth } from \"../../../../redux/reducers/Auth\";\nimport { IAccount } from \"../../../../redux/reducers/Account\";\nimport { ITheme } from \"../../../../redux/reducers/Theme\";\nimport TranslateText from \"../../../../utils/translate\";\nimport { IUsers } from \"../../../../api/types.response\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport \"./add_user.scss\";\nexport enum status {\n  inactive = 0,\n  active = 1,\n  disabled = 2,\n}\ninterface IUserListStoreProps {\n  token?: string;\n  locale?: string;\n  CompanyID: number;\n  ID?: number;\n  sendActivationCode: (ID: number) => void;\n}\n\ninterface UserListStateProps {\n  users: IUsers[];\n  usersToSearch: any;\n  selectedRows: any;\n  selectedKeys: any;\n  userProfileVisible: boolean;\n  selectedUser: any;\n  isHidden: string;\n  editModalVisible: boolean;\n  newUserModalVisible: boolean;\n  registerUserModalVisible: boolean;\n  loading: boolean;\n}\n\nexport class UserList extends Component<IUserListStoreProps> {\n  state: UserListStateProps = {\n    users: [],\n    usersToSearch: [],\n    selectedRows: [],\n    selectedKeys: [],\n    userProfileVisible: false,\n    selectedUser: null,\n    isHidden: \"block\",\n    editModalVisible: false,\n    newUserModalVisible: false,\n    registerUserModalVisible: false,\n    loading: true,\n  };\n\n  private instance = new AppService();\n  getUsersInfo = async () => {\n    return this.instance.GetUserList().then((data) => {\n      if (data && data.ErrorCode === 0) {\n        this.setState({ loading: false });\n        // Don't show current user in the list\n        const filteredUsers = data.Users.filter(\n          (user: any) => user.ID !== this.props.ID\n        );\n\n        // Always show last registered user first in the list\n        const evaluatedArray = Utils.sortData(filteredUsers, \"ID\").reverse();\n\n        this.setState({\n          users: evaluatedArray,\n          usersToSearch: evaluatedArray,\n        });\n      }\n    });\n  };\n\n  componentDidMount() {\n    this.getUsersInfo();\n  }\n\n  componentWillUnmount() {\n    this.instance._source.cancel();\n  }\n\n  showUserProfile = (userInfo: IUsers) => {\n    this.setState({\n      userProfileVisible: true,\n      selectedUser: userInfo,\n    });\n  };\n  closeUserViewProfile = () => {\n    this.setState({\n      userProfileVisible: false,\n      selectedUser: null,\n    });\n  };\n\n  showEditModal = (userInfo: IUsers) => {\n    this.setState({\n      editModalVisible: true,\n      selectedUser: userInfo,\n    });\n  };\n  closeEditModal = () => {\n    this.setState({\n      editModalVisible: false,\n      selectedUser: null,\n    });\n  };\n\n  showNewUserModal = () => {\n    this.setState({\n      newUserModalVisible: true,\n    });\n  };\n\n  closeNewUserModal = () => {\n    this.setState({\n      newUserModalVisible: false,\n    });\n  };\n\n  toggleStatusRow = async (row: IUsers[], statusNumber: number) => {\n    Modal.confirm({\n      title: `Are you sure you want to ${\n        statusNumber === 0 || statusNumber === 2 ? \"disable\" : \"activate\"\n      } ${row.length} ${row.length > 1 ? \"users\" : \"user\"}?`,\n      onOk: async () => {\n        await Promise.all(\n          row.map(async (elm: any) => {\n            await this.handleUserStatus(elm.ID, statusNumber);\n          })\n        );\n        this.setState({ selectedRows: [], selectedKeys: [] });\n        this.getUsersInfo();\n      },\n    });\n  };\n\n  handleUserStatus = (userId: number, status: number) => {\n    return this.instance.ChangeUserStatus(userId, status);\n  };\n  dropdownMenu = (row: any) => (\n    <Menu>\n      {row.Status === 0 && (\n        <Menu.Item\n          onClick={() =>\n            Modal.confirm({\n              title: `Are you sure you want to send an email to ${row.FirstName} ?`,\n              onOk: () => {\n                this.props.sendActivationCode(row.ID);\n              },\n              onCancel: () => {},\n            })\n          }\n        >\n          <Flex alignItems=\"center\">\n            <ArrowRightOutlined />\n            <span className=\"ml-2\">\n              <IntlMessage id={\"users.SendCode\"} />\n            </span>\n          </Flex>\n        </Menu.Item>\n      )}\n      <Menu.Item onClick={() => this.showUserProfile(row)}>\n        <Flex alignItems=\"center\">\n          <EyeOutlined />\n          <span className=\"ml-2\">\n            <IntlMessage id={\"users.ViewDetails\"} />\n          </span>\n        </Flex>\n      </Menu.Item>\n      <Menu.Item onClick={() => this.showEditModal(row)}>\n        <Flex alignItems=\"center\">\n          <EditOutlined />\n          <span className=\"ml-2\">\n            <IntlMessage id={\"users.Edit\"} />\n          </span>\n        </Flex>\n      </Menu.Item>\n      {row.Status === status.disabled ? (\n        <Menu.Item\n          onClick={async () => {\n            Modal.confirm({\n              title: `Are you sure you want to activate this user?`,\n              onOk: async () => {\n                await this.handleUserStatus(row.ID, status.active);\n                await this.getUsersInfo();\n              },\n            });\n          }}\n        >\n          <Flex alignItems=\"center\">\n            <CheckCircleOutlined />\n            <span className=\"ml-2\">\n              <IntlMessage id={\"users.Activate\"} />\n            </span>\n          </Flex>\n        </Menu.Item>\n      ) : row.Status === status.active ? (\n        <Menu.Item\n          onClick={async () => {\n            Modal.confirm({\n              title: TranslateText(\"users.Disable.Title\"),\n              onOk: async () => {\n                await this.handleUserStatus(row.ID, status.disabled);\n                await this.getUsersInfo();\n              },\n            });\n          }}\n        >\n          <Flex alignItems=\"center\">\n            <CloseCircleOutlined />\n            <span className=\"ml-2\">\n              <IntlMessage id={\"users.Disable\"} />\n            </span>\n          </Flex>\n        </Menu.Item>\n      ) : null}\n    </Menu>\n  );\n\n  onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    const searchArray = value ? this.state.users : this.state.usersToSearch;\n    const data = Utils.wildCardSearch(searchArray, value);\n    this.setState({ users: data });\n  };\n\n  render() {\n    const { users, userProfileVisible, selectedUser } = this.state;\n\n    const tableColumns: ColumnsType<IUsers> = [\n      {\n        title: <IntlMessage id={\"users.table.User\"} />,\n        dataIndex: \"name\",\n        render: (_: any, record: IUsers) => (\n          <div className=\"d-flex\">\n            <AvatarStatus\n              src={record.Photo}\n              name={`${record.FirstName} ${record.LastName}`}\n              subTitle={record.Email}\n              icon={<UserOutlined />}\n            />\n          </div>\n        ),\n      },\n      {\n        title: <IntlMessage id={\"users.table.Role\"} />,\n        render: () => \"User\",\n      },\n      {\n        title: <IntlMessage id={\"users.table.LastOnline\"} />,\n        dataIndex: \"LastAuthorize\",\n        render: (LastAuthorize: any) => (\n          <span>\n            {LastAuthorize\n              ? moment.unix(LastAuthorize.slice(6, 16)).format(\"DD/MM/YYYY\")\n              : \" \"}{\" \"}\n          </span>\n        ),\n      },\n      {\n        title: <IntlMessage id={\"users.table.Status\"} />,\n        dataIndex: \"Status\",\n        render: (Status: number) => (\n          <Tag\n            className=\"text-capitalize\"\n            color={\n              Status === status.active\n                ? \"cyan\"\n                : Status === status.disabled\n                ? \"red\"\n                : \"orange\"\n            }\n          >\n            {Status === 1 ? (\n              <IntlMessage id={\"users.status.Active\"} />\n            ) : Status === 2 ? (\n              <IntlMessage id={\"users.status.Disabled\"} />\n            ) : (\n              <IntlMessage id={\"users.status.NotActivated\"} />\n            )}\n          </Tag>\n        ),\n      },\n      {\n        dataIndex: \"actions\",\n        render: (_: any, elm: IUsers) => (\n          <div className=\"text-right\">\n            <EllipsisDropdown menu={this.dropdownMenu(elm)} />\n          </div>\n        ),\n      },\n    ];\n    return (\n      <Card>\n        <Flex className=\"mb-1\" mobileFlex={false} justifyContent=\"between\">\n          <div className=\"mr-md-3 mb-3\">\n            <Input\n              placeholder={TranslateText(\"app.Search\")}\n              prefix={<SearchOutlined />}\n              onChange={(e) => this.onSearch(e)}\n            />\n          </div>\n          <div>\n            <Flex>\n              {this.state.selectedRows.length > 0 && (\n                <>\n                  <Button\n                    type=\"primary\"\n                    className=\"mr-3\"\n                    onClick={() =>\n                      this.toggleStatusRow(\n                        this.state.selectedRows,\n                        status.active\n                      )\n                    }\n                  >\n                    {this.state.selectedRows.length > 1 ? (\n                      <>\n                        <IntlMessage id={\"users.Activate\"} /> (\n                        {this.state.selectedRows.length})\n                      </>\n                    ) : (\n                      <IntlMessage id=\"users.Activate\" />\n                    )}\n                  </Button>\n                  <Button\n                    type=\"ghost\"\n                    className=\"mr-3\"\n                    onClick={() =>\n                      this.toggleStatusRow(\n                        this.state.selectedRows,\n                        status.disabled\n                      )\n                    }\n                  >\n                    {this.state.selectedRows.length > 1 ? (\n                      <>\n                        <IntlMessage id={\"users.Disable\"} /> (\n                        {this.state.selectedRows.length})\n                      </>\n                    ) : (\n                      <IntlMessage id={\"users.Disable\"} />\n                    )}\n                  </Button>\n                </>\n              )}\n              <Button\n                onClick={this.showNewUserModal}\n                type=\"primary\"\n                icon={<PlusCircleOutlined />}\n                block\n              >\n                {\" \"}\n                <IntlMessage id={\"users.Invite\"} />\n              </Button>\n            </Flex>\n          </div>\n        </Flex>\n        <Table\n          loading={this.state.loading}\n          columns={tableColumns}\n          dataSource={users}\n          rowKey=\"ID\"\n          rowSelection={{\n            onChange: (key, rows) => {\n              this.setState({ selectedKeys: key });\n              this.setState({ selectedRows: rows });\n            },\n            selectedRowKeys: this.state.selectedKeys,\n            type: \"checkbox\",\n            preserveSelectedRowKeys: false,\n          }}\n        />\n        <UserView\n          data={selectedUser}\n          visible={userProfileVisible}\n          close={() => {\n            this.closeUserViewProfile();\n          }}\n        />\n        <UserModalAdd\n          getUsersInfo={this.getUsersInfo}\n          CompanyID={this.props.CompanyID}\n          onCancel={this.closeNewUserModal}\n          visible={this.state.newUserModalVisible}\n        />\n        <UserModalEdit\n          getUsersInfo={this.getUsersInfo}\n          data={selectedUser}\n          visible={this.state.editModalVisible}\n          onCancel={() => {\n            this.closeEditModal();\n          }}\n        />\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth, theme, account }: IState) => {\n  const { token } = auth as IAuth;\n  const { CompanyID, ID } = account as IAccount;\n  const { locale } = theme as ITheme;\n  return { token, locale, CompanyID, ID };\n};\n\nexport default connect(mapStateToProps, { sendActivationCode })(UserList);\n","import React, { Component } from \"react\";\nimport { Avatar, Drawer, Divider } from \"antd\";\nimport {\n  MobileOutlined,\n  MailOutlined,\n  UserOutlined,\n  ApartmentOutlined,\n} from \"@ant-design/icons\";\nimport { IUsers } from \"../../../../api/types.response\";\n\ninterface UserViewProps {\n  data: IUsers;\n  visible: boolean;\n  close: () => void;\n}\n\nexport class UserView extends Component<UserViewProps> {\n  render() {\n    const { data, visible, close } = this.props;\n    return (\n      <Drawer\n        width={300}\n        placement=\"right\"\n        onClose={close}\n        closable={false}\n        visible={visible}\n      >\n        <div className=\"text-center mt-3\">\n          <Avatar size={80} src={data?.Photo} icon={<UserOutlined />} />\n          <h3 className=\"mt-2 mb-0\">\n            {data?.FirstName && data?.LastName\n              ? data?.FirstName + \" \" + data?.LastName\n              : \" \"}\n          </h3>\n          <span className=\"text-muted\">\n            {/* {data?.personalInfo.title} */}User\n          </span>\n        </div>\n        <Divider dashed />\n        <div className=\"\">\n          <h6 className=\"text-muted text-uppercase mb-3\">Account details</h6>\n          <p>\n            <UserOutlined />\n            <span className=\"ml-3 text-dark\">Personal ID: {data?.ID}</span>\n          </p>\n          <p>\n            <ApartmentOutlined />\n            <span className=\"ml-3 text-dark\">\n              Company ID: {data?.CompanyID}\n            </span>\n          </p>\n          {/* <p>\n            <CalendarOutlined />\n            <span className=\"ml-3 text-dark\">\n              Born in {data?.personalInfo.birthday}\n            </span>\n          </p> */}\n        </div>\n        <div className=\"mt-5\">\n          <h6 className=\"text-muted text-uppercase mb-3\">CONTACT</h6>\n          <p>\n            <MobileOutlined />\n            <span className=\"ml-3 text-dark\">{data?.PhoneNumber}</span>\n          </p>\n          <p>\n            <MailOutlined />\n            <span className=\"ml-3 text-dark\">\n              {data?.Email ? data?.Email : \"-\"}\n            </span>\n          </p>\n          {/* <p>\n            <CompassOutlined />\n            <span className=\"ml-3 text-dark\">\n              {data?.personalInfo.location}\n            </span>\n          </p> */}\n        </div>\n        {/* <div className=\"mt-5\">\n          <h6 className=\"text-muted text-uppercase mb-3\">Social profiles</h6>\n          <p>\n            <FacebookOutlined />\n            <a href=\"/#\" className=\"ml-3 text-dark\">\n              {data?.personalInfo.facebook ? data?.personalInfo.facebook : \"-\"}\n            </a>\n          </p>\n          <p>\n            <TwitterOutlined />\n            <a href=\"/#\" className=\"ml-3 text-dark\">\n              {data?.personalInfo.twitter ? data?.personalInfo.twitter : \"-\"}\n            </a>\n          </p>\n          <p>\n            <InstagramOutlined />\n            <a href=\"/#\" className=\"ml-3 text-dark\">\n              {data?.personalInfo.instagram\n                ? data?.personalInfo.instagram\n                : \"-\"}\n            </a>\n          </p>\n          <p>\n            <GlobalOutlined />\n            <a href=\"/#\" className=\"ml-3 text-dark\">\n              {data?.personalInfo.site ? data?.personalInfo.site : \"-\"}\n            </a>\n          </p>\n        </div> */}\n      </Drawer>\n    );\n  }\n}\n\nexport default UserView;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Avatar } from \"antd\";\n\ninterface AvatarStatusProps {\n    name?: any;\n    suffix?: any;\n    subTitle?: any;\n    id?: any;\n    type?: any;\n    src?: any;\n    icon?: any;\n    size?: any;\n    shape?: any;\n    gap?: any;\n    text?: any;\n    onNameClick?: any;\n}\n\nconst renderAvatar = (props: AvatarStatusProps) => {\n    return (\n        <Avatar {...props} className={`ant-avatar-${props.type}`}>\n            {props.text}\n        </Avatar>\n    );\n};\n\nconst AvatarStatus = ({\n    name,\n    suffix,\n    subTitle,\n    id,\n    type,\n    src,\n    icon,\n    size,\n    shape,\n    gap,\n    text,\n    onNameClick,\n}: AvatarStatusProps) => {\n    return (\n        <div className=\"avatar-status d-flex align-items-center\">\n            {renderAvatar({ icon, src, type, size, shape, gap, text })}\n            <div className=\"ml-2\">\n                <div>\n                    {onNameClick ? (\n                        <div\n                            onClick={() =>\n                                onNameClick({ name, subTitle, src, id })\n                            }\n                            className=\"avatar-status-name clickable\"\n                        >\n                            {name}\n                        </div>\n                    ) : (\n                        <div className=\"avatar-status-name\">{name}</div>\n                    )}\n                    <span>{suffix}</span>\n                </div>\n                <div className=\"text-muted avatar-status-subtitle\">\n                    {subTitle}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AvatarStatus;\n","import React, { useEffect } from \"react\";\nimport { Input, Row, Col, Form, Modal, message } from \"antd\";\nimport IntlMessage from \"../../../../components/util-components/IntlMessage\";\nimport { ROW_GUTTER } from \"../../../../constants/ThemeConstant\";\nimport { AppService } from \"../../../../api\";\nimport { DONE, UPDATING } from \"../../../../constants/Messages\";\nimport TranslateText from \"../../../../utils/translate\";\nimport { IUsers } from \"../../../../api/types.response\";\ninterface IUserModalEdit {\n    data: IUsers;\n    visible: boolean;\n    onCancel: () => void;\n    getUsersInfo: () => void;\n}\nexport const UserModalEdit = ({\n  data,\n  visible,\n  onCancel,\n  getUsersInfo,\n}: IUserModalEdit) => {\n  const [form] = Form.useForm();\n\n  /*  Destroy initialValues of form after Modal is closed */\n  useEffect(() => {\n    if (!visible) return;\n    form.resetFields();\n  }, [visible, form]);\n\n  const updateUser = (data: any) => {\n    return new AppService().UpdateUser(data);\n  };\n  const onFinish = (values: any) => {\n    const key = \"updatable\";\n    message.loading({\n      content: TranslateText(UPDATING),\n      key,\n    });\n    setTimeout(async () => {\n      updateUser({ User: { ...data, ...values } }).then((data: any) => {\n        if (data) {\n          if (data.ErrorCode === 0) {\n            message.success({\n              content: TranslateText(DONE),\n              key: \"updatable\",\n            });\n            getUsersInfo();\n          }\n        }\n      });\n    }, 1000);\n  };\n  const onFinishFailed = () => {};\n\n  return (\n    <Modal\n      destroyOnClose\n      title={\"Edit user\"}\n      visible={visible}\n      okText={<IntlMessage id={\"account.EditProfile.SaveChange\"} />}\n      onCancel={onCancel}\n      onOk={() => {\n        form.validateFields().then((values) => {\n          onCancel();\n          onFinish(values);\n        });\n      }}\n    >\n      <Form\n        form={form}\n        name=\"basicInformation\"\n        layout=\"vertical\"\n        initialValues={data}\n      >\n        <Row gutter={ROW_GUTTER}>\n          <Col xs={24} sm={24} md={12}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.FirstName\"} />}\n              name=\"FirstName\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your first name!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={24} md={12}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.LastName\"} />}\n              name=\"LastName\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your last name!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={24} md={12}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.Email\"} />}\n              name=\"Email\"\n              rules={[\n                {\n                  required: true,\n                  type: \"email\",\n                  message: \"Please enter a valid email!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={24} md={12}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.PhoneNumber\"} />}\n              name=\"PhoneNumber\"\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n};\n","import { Row, Col, Input, Modal, Form } from \"antd\";\nimport React, { useState } from \"react\";\nimport IntlMessage from \"../../../../components/util-components/IntlMessage\";\nimport { ROW_GUTTER } from \"../../../../constants/ThemeConstant\";\nimport { AuthService } from \"../../../../api\";\n\ninterface IUserModalAdd {\n  onCancel: () => void;\n  visible: boolean;\n  CompanyID: number;\n  getUsersInfo: () => Promise<void>;\n}\n\nexport const UserModalAdd = ({\n  onCancel,\n  visible,\n  CompanyID,\n  getUsersInfo,\n}: IUserModalAdd) => {\n  const [form] = Form.useForm();\n  const [loading, setLoading] = useState(false);\n\n  const registerUser = (values: any) => {\n    return new AuthService().RegisterUser({\n      ...values,\n      CompanyID,\n      UiLanguage: 0,\n    });\n  };\n\n  const onFinish = (values: any) => {\n    registerUser(values).then((data: any) => {\n      if (data) {\n        if (data.ErrorCode === 0) {\n          getUsersInfo();\n        }\n      }\n    });\n  };\n  return (\n    <Modal\n      title={\"Invite user\"}\n      visible={visible}\n      okText={<IntlMessage id={\"account.EditProfile.SaveChange\"} />}\n      onCancel={onCancel}\n      confirmLoading={loading}\n      onOk={() => {\n        setLoading(true);\n        setTimeout(() => {\n          setLoading(false);\n          form.validateFields().then((values) => {\n            onCancel();\n            onFinish(values);\n          });\n        }, 1000);\n      }}\n    >\n      <Form form={form} name=\"basicInformation\" layout=\"vertical\">\n        <Row gutter={ROW_GUTTER}>\n          <Col xs={24} sm={24} md={12}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.FirstName\"} />}\n              name=\"FirstName\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your first name!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={24} md={12}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.LastName\"} />}\n              name=\"LastName\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your last name!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n          <Col xs={24} sm={24} md={24}>\n            <Form.Item\n              label={<IntlMessage id={\"account.EditProfile.Email\"} />}\n              name=\"Email\"\n              rules={[\n                {\n                  required: true,\n                  type: \"email\",\n                  message: \"Please enter a valid email!\",\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n};\n"],"sourceRoot":""}