{"version":3,"sources":["components/shared-components/Loading/index.tsx","constants/Messages.ts","redux/constants/Account.ts","redux/actions/Account.ts","components/shared-components/Flex/index.tsx","components/util-components/IntlMessage/index.tsx","components/layout-components/NavLanguage.tsx","constants/ThemeConstant.ts","configs/NavigationConfig.ts","components/layout-components/MenuContent.tsx","components/layout-components/SideNav.tsx","components/layout-components/TopNav.tsx","components/layout-components/Logo.tsx","components/layout-components/MobileNav.tsx","components/layout-components/ThemeConfigurator.tsx","components/layout-components/NavPanel.tsx","components/layout-components/NavSearch/SearchInput.tsx","components/layout-components/NavSearch/index.tsx","components/layout-components/NavProfile.tsx","views/app-views/applications/AppNavGrid.tsx","views/app-views/applications/AppNav.tsx","components/layout-components/HeaderNav.tsx","components/layout-components/AppBreadcrumb.tsx","components/layout-components/PageHeader.tsx","components/layout-components/Footer.tsx","views/app-views/index.tsx","layouts/app-layout/index.tsx","views/auth-views/index.tsx","layouts/auth-layout/index.tsx","views/index.tsx","App.tsx","serviceWorker.ts","index.tsx","redux/constants/Theme.ts","redux/constants/Auth.ts","redux/actions/Theme.ts","utils/index.ts","utils/translate.tsx","components/util-components/Icon/index.tsx","api/index.ts","redux/reducers/Auth.ts","redux/reducers/Theme.ts","redux/reducers/Account.ts","redux/reducers/index.ts","redux/store/index.ts","utils/localStorage.ts","configs/EnvironmentConfig.ts","configs/AppConfig.ts","redux/actions/Auth.ts","lang/entries/en_US.ts","lang/entries/ro_RO.ts","lang/index.ts","lang/entries/ru_RU.ts"],"names":["Icon","style","fontSize","spin","Loading","props","align","cover","className","indicator","EXPIRE_TIME","EMAIL_CONFIRM_MSG","NEW_PASSWORD","ACTIVATE_ACCOUNT","DONE","UPLOADED","UPLOADING","UPDATING","UPDATE_SETTINGS","CLEAR_INFO","updateSettings","payload","type","getProfileInfo","dispatch","a","AppService","GetProfileInfo","then","data","ErrorCode","User","UiLanguage","CHANGE_LOCALE","locale","setProfileInfo","accountInfo","UpdateUser","Flex","children","alignItems","justifyContent","mobileFlex","flexDirection","injectIntl","SelectedLanguage","language","lang","filter","elm","langId","getLanguageDetail","langName","icon","maxWidth","src","process","alt","mapDispatchToProps","onLocaleChange","connect","theme","account","auth","token","configDisplay","triggerType","languageOption","map","Item","key","onClick","window","location","pathname","indexOf","Token","placement","overlay","trigger","href","e","preventDefault","border","ROW_GUTTER","SIDE_NAV_WIDTH","SIDE_NAV_COLLAPSED_WIDTH","SIDE_NAV_LIGHT","SIDE_NAV_DARK","NAV_TYPE_SIDE","NAV_TYPE_TOP","dashBoardNavTree","path","title","DashboardOutlined","breadcrumb","submenu","InfoCircleOutlined","AppstoreOutlined","AppstoreAddOutlined","ApartmentOutlined","UserOutlined","UsergroupAddOutlined","AuditOutlined","HistoryOutlined","InteractionOutlined","BookOutlined","CreditCardOutlined","navigationConfig","SubMenu","Menu","useBreakpoint","Grid","setLocale","isLocaleOn","localeKey","IntlMessage","id","toString","setDefaultOpen","keyList","keyString","arr","split","index","length","push","SideNavContent","sideNavTheme","routeInfo","hideGroupTitle","localization","onMobileNavToggle","isMobile","utils","getBreakPoint","includes","closeMobileNav","mode","height","borderRight","defaultSelectedKeys","defaultOpenKeys","menu","ItemGroup","subMenuFirst","subMenuSecond","to","TopNavContent","topNavColor","backgroundColor","popupClassName","Sider","Layout","navCollapsed","useEffect","document","TranslateText","APP_NAME","width","collapsed","autoHide","getColorContrast","getLogoWidthGutter","isNavTop","navType","mobileLogo","getLogo","logoType","getLogoDisplay","mobileNav","onClose","closable","visible","bodyStyle","padding","ArrowLeftOutlined","colorOptions","white","ListOption","name","selector","disabled","vertical","toggleCollapsedNav","onNavTypeChange","onNavStyleChange","onTopNavColorChange","onHeaderNavColorChange","headerNavColor","Utils","isCollapse","AppLocale","Group","onChange","value","target","color","size","Button","checked","NavLanguage","NavPanel","state","showDrawer","setState","this","SettingOutlined","Component","getOptionList","navigationTree","optionTree","navItem","SearchInput","active","close","useState","setValue","options","setOptions","inputRef","useRef","ref","dropdownClassName","onSelect","onSearch","searchText","filterOption","inputValue","option","toUpperCase","placeholder","prefix","SearchOutlined","CloseOutlined","menuItem","QuestionCircleOutlined","FirstName","Photo","signOut","confirm","Modal","profileMenu","selectable","el","i","onOk","Promise","resolve","setTimeout","LogoutOutlined","AppNavGrid","apps","app","Name","APP_PREFIX_PATH","AppType","ExperimentOutlined","shape","marginBottom","AppStoreNav","loading","useSelector","setApps","renderApps","GetMarketAppList","MarketAppList","minHeight","image","Empty","PRESENTED_IMAGE_SIMPLE","Header","CompanyID","history","searchActive","setSearchActive","currentCompany","setCurrentCompany","GetCompanyInfo","Company","CommercialName","MenuUnfoldOutlined","MenuFoldOutlined","breadcrumbData","forEach","assignBreadcrumb","obj","BreadcrumbRoute","withRouter","pathSnippets","buildBreadcrumb","_","url","slice","join","AppBreadcrumb","PageHeader","display","Footer","Date","getFullYear","React","memo","fallback","component","lazy","exact","from","Content","currentRouteInfo","getRouteInfo","isNavSide","paddingLeft","AuthViews","match","AuthLayout","RouteInterceptor","isAuthenticated","rest","render","AUTH_PREFIX_PATH","currentAppLocale","localStorage","getItem","SUBDIR_PATH","messages","antd","App","store","basename","Views","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","TOGGLE_COLLAPSED_NAV","SIDE_NAV_STYLE_CHANGE","NAV_TYPE_CHANGE","TOP_NAV_COLOR_CHANGE","HEADER_NAV_COLOR_CHANGE","TOGGLE_MOBILE_NAV","SET_TOKEN","AUTHENTICATED","SIGNOUT","SIGNOUT_SUCCESS","SIGNUP_SUCCESS","SHOW_AUTH_MESSAGE","HIDE_AUTH_MESSAGE","SHOW_LOADING","HIDE_LOADING","SIGNIN_WITH_GOOGLE_AUTHENTICATED","SIGNIN_WITH_FACEBOOK_AUTHENTICATED","IS_USER_ACTIVATED","initials","shift","pop","navTree","route","p","hasOwnProperty","hex","cutHex","h","charAt","substring","parseInt","hexToG","hexToB","percent","R","G","B","String","RR","GG","BB","number","positive","negative","b","toLowerCase","list","item","input","screens","breakpoints","publicKey","jsEncrypt","JSEncrypt","setPublicKey","encrypt","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","file","reject","onload","event","createElement","isSquare","isJpgOrPng","message","error","isLt2M","onSuccess","array","sort","date","moment","format","getMilliseconds","getState","ReactDOMServer","renderToString","publicIp","require","HttpClient","baseURL","instance","_token","_source","_RefreshToken","get","API_AUTH_URL","_initializeResponseInterceptor","interceptors","response","use","_handleResponse","_handleError","_initializeRequestInterceptor","request","_handleRequest","config","console","log","method","API_SMS_URL","params","cancelToken","authenticated","axios","JSON","parse","content","duration","ErrorMessage","status","hideLoading","create","CancelToken","source","AuthService","Login","v4","info","post","RegisterCompany","SendActivationCode","ResetPassword","Email","RegisterUser","GetManagedToken","ChangePassword","ActivateUser","API_APP_URL","DeactivateApp","AppID","ActivateApp","GetAppLicenses","RequestLicense","Quantity","ReleaseLicense","LicenseID","DeleteLicense","GenerateApiKey","GenerateRsaKey","UpdateRsaKey","Key","KeyType","DeleteApiKey","GenerateLicenseActivationCode","GetUserList","UpdateCompany","ChangeUserStatus","ID","Status","GetAppNews","UpdateNews","NewsData","UpdateApp","AppData","GetPortalNews","ProductType","SMS_GetCampaign","SMS_DeleteCampaign","SMS_ReviewerUpdate","reviewerInfo","SMS_UpdateCampaign","campaignInfo","SmsService","CheckApiKey","APIKey","GetInfo","Info_GetByPeriod","DateTicksStart","DateTicksEnd","Info_GetDetailByPeriod","DateStart","DateEnd","Info_GetTotal","SendSMS","SendSMSByPhoneList","initState","showMessage","redirect","isAuth","userActivated","action","activationToken","initTheme","THEME_CONFIG","initialState","LastName","Password","PhoneNumber","reducers","combineReducers","Theme","Auth","Account","preLoadedState","serializedState","loadState","createStore","compose","applyMiddleware","thunk","subscribe","throttle","stringify","setItem","saveState","env","showAuthMessage","hideAuthMessage","showLoading","sendActivationCode","success","handleAccountActivation","authorizeUser","userData","EnLang","antdEnUS","enMsg","RoLang","antdRoRO","roMsg","en","enLang","ro","roLang","ru","antdRuRU","ruMsg"],"mappings":"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","file":"static/js/main.0cacc94d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spin } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\n\nexport interface ILoading {\n    align?: string;\n    cover?: string;\n}\n\nconst Icon = <LoadingOutlined style={{ fontSize: 35 }} spin />;\n\nconst Loading = (props: ILoading) => {\n    const { align = \"center\", cover = \"inline\" } = props;\n    return (\n        <div className={`loading text-${align} cover-${cover}`}>\n            <Spin indicator={Icon} />\n        </div>\n    );\n};\n\n// Loading.propTypes = {\n//     size: PropTypes.string,\n//     cover: PropTypes.string,\n// };\n\n// Loading.defaultProps = {\n//     align: \"center\",\n//     cover: \"inline\",\n// };\n\nexport default Loading;\n","export const EXPIRE_TIME = \"message.ExpireTime\";\nexport const EMAIL_CONFIRM_MSG = \"message.EmailConfirmMsg\";\nexport const NEW_PASSWORD = \"message.NewPassword\";\nexport const ACTIVATE_ACCOUNT = \"auth.ActivateAccount\";\nexport const DONE = \"message.Done\";\nexport const UPLOADED = \"message.Uploaded\";\nexport const UPLOADING = \"message.Uploading\";\nexport const UPDATING = \"message.Updating\";\nexport const ERROR = \"message.Error\";\n","export const UPDATE_SETTINGS = \"UPDATE_SETTINGS\";\nexport const CLEAR_INFO = \"CLEAR_INFO\";\nexport const REMOVE_AVATAR = \"REMOVE_AVATAR\";\n","import { CLEAR_INFO, UPDATE_SETTINGS } from \"../constants/Account\";\nimport { AppService } from \"../../api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { IState } from \"../reducers\";\nimport { CHANGE_LOCALE } from \"../constants/Theme\";\nimport { IUsers } from \"../../api/types.response\";\n\ntype ThunkResult<R> = ThunkAction<R, IState, undefined, any>;\n\nexport const updateSettings = (payload: IUsers) => ({\n  type: UPDATE_SETTINGS,\n  payload,\n});\n\nexport const clearSettings = () => ({\n  type: CLEAR_INFO,\n});\n\nexport const getProfileInfo = (): ThunkResult<void> => {\n  return async (dispatch) => {\n    return new AppService().GetProfileInfo().then((data) => {\n      if (data && data.ErrorCode === 0) {\n        const { User } = data;\n        dispatch({ type: UPDATE_SETTINGS, payload: User });\n        if (User.UiLanguage === 0) {\n          dispatch({ type: CHANGE_LOCALE, locale: \"ro\" });\n        } else if (User.UiLanguage === 1) {\n          dispatch({ type: CHANGE_LOCALE, locale: \"ru\" });\n        } else {\n          dispatch({ type: CHANGE_LOCALE, locale: \"en\" });\n        }\n      }\n    });\n  };\n};\n\nexport const setProfileInfo = (accountInfo: IUsers): ThunkResult<void> => {\n  return async (dispatch) => {\n    return new AppService().UpdateUser(accountInfo).then((data) => {\n      if (data && data.ErrorCode === 0) dispatch(getProfileInfo());\n    });\n  };\n};\n","import React from \"react\";\n\ninterface IFlex {\n  children?: any;\n  className?: string;\n  alignItems?: string;\n  flexDirection?: string;\n  justifyContent?: string;\n  mobileFlex?: boolean;\n}\n\nconst Flex: React.FC<IFlex> = ({\n  children,\n  className = \"\",\n  alignItems,\n  justifyContent,\n  mobileFlex = true,\n  flexDirection = \"row\",\n}) => {\n  const getFlexResponsive = () => (mobileFlex ? \"d-flex\" : \"d-md-flex\");\n  return (\n    <div\n      className={`${getFlexResponsive()} ${className} ${\n        flexDirection ? \"flex-\" + flexDirection : \"\"\n      } ${alignItems ? \"align-items-\" + alignItems : \"\"} ${\n        justifyContent ? \"justify-content-\" + justifyContent : \"\"\n      }`}\n    >\n      {children}\n    </div>\n  );\n};\nexport default Flex;\n","import React from \"react\";\nimport { FormattedMessage, injectIntl } from \"react-intl\";\nconst IntlMessage = (props: any) => <FormattedMessage {...props} />;\nexport default injectIntl(IntlMessage /*{\n  withRef: false\n}*/);\n","import React from \"react\";\nimport { CheckOutlined, GlobalOutlined, DownOutlined } from \"@ant-design/icons\";\nimport { Menu, Dropdown } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { lang } from \"../../assets/data/language.data.json\";\nimport { onLocaleChange } from \"../../redux/actions/Theme\";\nimport { setProfileInfo } from \"../../redux/actions/Account\";\nimport { IState } from \"../../redux/reducers\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IAuth } from \"../../redux/reducers/Auth\";\ninterface NavLanguageProps {\n    [key: string]: any;\n}\n\nfunction getLanguageDetail(locale: string) {\n    const data = lang.filter((elm) => elm.langId === locale);\n    return data[0];\n}\n\nconst SelectedLanguage = ({ locale }: { [key: string]: any }) => {\n    const language = getLanguageDetail(locale);\n    const { langName, icon } = language;\n\n    return (\n        <div className=\"d-flex align-items-center\">\n            <img\n                style={{ maxWidth: \"20px\" }}\n                src={`${process.env.PUBLIC_URL}/img/flags/${icon}.png`}\n                alt={langName}\n            />\n            <span className=\"font-weight-semibold ml-2\">\n                {langName} <DownOutlined className=\"font-size-xs\" />\n            </span>\n        </div>\n    );\n};\n\nconst NavLanguage = ({\n    locale,\n    configDisplay,\n    onLocaleChange,\n    triggerType,\n    setProfileInfo,\n    account,\n    token,\n}: NavLanguageProps) => {\n    const languageOption = (\n        <Menu>\n            {lang.map((elm) => {\n                return (\n                    <Menu.Item\n                        key={elm.langId}\n                        className={\n                            locale === elm.langId\n                                ? \"ant-dropdown-menu-item-active\"\n                                : \"\"\n                        }\n                        onClick={() => {\n                            onLocaleChange(elm[\"langId\"]);\n                            const app = \"app\";\n                            if (window.location.pathname.indexOf(app) >= 0)\n                                setProfileInfo({\n                                    Token: token,\n                                    User: {\n                                        ...account,\n                                        UiLanguage:\n                                            elm[\"langId\"] === \"ro\"\n                                                ? 0\n                                                : elm[\"langId\"] === \"ru\"\n                                                ? 1\n                                                : 2,\n                                    },\n                                });\n                        }}\n                    >\n                        <div className=\"d-flex justify-content-between align-items-center\">\n                            <div>\n                                <img\n                                    style={{ maxWidth: \"20px\" }}\n                                    src={\n                                        process.env.PUBLIC_URL +\n                                        `/img/flags/${elm.icon}.png`\n                                    }\n                                    alt={elm.langName}\n                                />\n                                <span className=\"font-weight-normal ml-2\">\n                                    {elm.langName}\n                                </span>\n                            </div>\n                            {locale === elm.langId && <CheckOutlined />}\n                        </div>\n                    </Menu.Item>\n                );\n            })}\n        </Menu>\n    );\n    return (\n        <Dropdown\n            placement=\"bottomRight\"\n            overlay={languageOption}\n            trigger={[triggerType]}\n        >\n            {configDisplay ? (\n                <a\n                    href=\"#/\"\n                    className=\"text-gray\"\n                    onClick={(e) => e.preventDefault()}\n                >\n                    <SelectedLanguage locale={locale} />\n                </a>\n            ) : (\n                <Menu style={{ border: \"none\" }}>\n                    <Menu.Item>\n                        <GlobalOutlined className=\"nav-icon mr-0\" />\n                    </Menu.Item>\n                </Menu>\n            )}\n        </Dropdown>\n    );\n};\n\nconst mapStateToProps = ({ theme, account, auth }: IState) => {\n    const { locale } = theme as ITheme;\n    const { token } = auth as IAuth;\n    return { locale, account, token };\n};\nconst mapDispatchToProps = {\n    setProfileInfo,\n    onLocaleChange,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavLanguage);\n","export const ROW_GUTTER = 16;\nexport const SIDE_NAV_WIDTH = 250;\nexport const SIDE_NAV_COLLAPSED_WIDTH = 80;\nexport const SIDE_NAV_LIGHT = 'SIDE_NAV_LIGHT';\nexport const SIDE_NAV_DARK = 'SIDE_NAV_DARK';\nexport const NAV_TYPE_SIDE = 'SIDE'\nexport const NAV_TYPE_TOP = 'TOP'\n","import {\n  DashboardOutlined,\n  AppstoreAddOutlined,\n  AppstoreOutlined,\n  UserOutlined,\n  AuditOutlined,\n  ApartmentOutlined,\n  UsergroupAddOutlined,\n  HistoryOutlined,\n  InteractionOutlined,\n  InfoCircleOutlined,\n  SnippetsOutlined,\n  BookOutlined,\n  CreditCardOutlined,\n} from \"@ant-design/icons\";\n\nexport interface INavTree {\n  key: string;\n  path: string;\n  title: string;\n  icon: any;\n  breadcrumb: boolean;\n  submenu: INavTree[];\n}\n\nconst dashBoardNavTree = [\n  {\n    key: \"dashboard\",\n    path: \"/app/dashboard\",\n    title: \"sidenav.dashboard\",\n    icon: DashboardOutlined,\n    breadcrumb: true,\n    submenu: [],\n  },\n  {\n    key: \"news\",\n    path: \"/app/news\",\n    title: \"sidenav.news\",\n    icon: InfoCircleOutlined,\n    breadcrumb: false,\n    submenu: [],\n  },\n  {\n    key: \"applications\",\n    path: \"/app/applications\",\n    title: \"sidenav.applications\",\n    icon: AppstoreOutlined,\n    breadcrumb: true,\n    submenu: [\n      {\n        key: \"my-applications\",\n        path: \"/app/my-applications\",\n        title: \"sidenav.my-applications\",\n        icon: AppstoreOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n      {\n        key: \"market\",\n        path: \"/app/market\",\n        title: \"sidenav.market\",\n        icon: AppstoreAddOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n    ],\n  },\n  {\n    key: \"catalog\",\n    path: \"/app/catalog\",\n    title: \"sidenav.catalog\",\n    icon: ApartmentOutlined,\n    breadcrumb: true,\n    submenu: [\n      {\n        key: \"company\",\n        path: \"/app/catalog/company\",\n        title: \"sidenav.catalog.company\",\n        icon: ApartmentOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n      {\n        key: \"users\",\n        path: \"/app/catalog/users\",\n        title: \"sidenav.catalog.users\",\n        icon: UserOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n      {\n        key: \"group\",\n        path: \"/app/catalog/group\",\n        title: \"sidenav.catalog.group\",\n        icon: UsergroupAddOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n    ],\n  },\n  {\n    key: \"audit\",\n    path: \"/app/audit\",\n    title: \"sidenav.audit\",\n    icon: AuditOutlined,\n    breadcrumb: true,\n    submenu: [\n      {\n        key: \"auditAll\",\n        path: \"/app/audit\",\n        title: \"sidenav.audit.All\",\n        icon: AuditOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n      {\n        key: \"loginHistory\",\n        path: \"/app/audit/history\",\n        title: \"sidenav.audit.loginHistory\",\n        icon: HistoryOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n      {\n        key: \"actions\",\n        path: \"/app/audit/actions\",\n        title: \"sidenav.audit.actions\",\n        icon: InteractionOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n    ],\n  },\n  {\n    key: \"other\",\n    path: \"/\",\n    title: \"sidenav.other\",\n    icon: ApartmentOutlined,\n    breadcrumb: false,\n    submenu: [\n      {\n        key: \"reports\",\n        path: \"/app/reports\",\n        title: \"sidenav.reports\",\n        icon: BookOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n      {\n        key: \"payment\",\n        path: \"/app/payments\",\n        title: \"sidenav.payment\",\n        icon: CreditCardOutlined,\n        breadcrumb: true,\n        submenu: [],\n      },\n    ],\n  },\n];\n\nconst navigationConfig = [...dashBoardNavTree];\n\nexport default navigationConfig;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Grid } from \"antd\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nimport Icon from \"../util-components/Icon\";\nimport navigationConfig from \"../../configs/NavigationConfig\";\nimport { connect } from \"react-redux\";\nimport { SIDE_NAV_LIGHT, NAV_TYPE_SIDE } from \"../../constants/ThemeConstant\";\nimport utils from \"../../utils\";\nimport { onMobileNavToggle } from \"../../redux/actions/Theme\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\n\nconst { SubMenu } = Menu;\nconst { useBreakpoint } = Grid;\n\nconst setLocale = (isLocaleOn: boolean, localeKey: string | number) =>\n    isLocaleOn ? <IntlMessage id={localeKey} /> : localeKey.toString();\n\nconst setDefaultOpen = (key: any) => {\n    let keyList: any[] = [];\n    let keyString = \"\";\n    if (key) {\n        const arr = key.split(\"-\");\n        for (let index = 0; index < arr.length; index++) {\n            const elm = arr[index];\n            index === 0\n                ? (keyString = elm)\n                : (keyString = `${keyString}-${elm}`);\n            keyList.push(keyString);\n        }\n    }\n    return keyList;\n};\n\nconst SideNavContent = (props: any) => {\n    const {\n        sideNavTheme,\n        routeInfo,\n        hideGroupTitle,\n        localization,\n        onMobileNavToggle,\n    } = props;\n    const isMobile = !utils.getBreakPoint(useBreakpoint()).includes(\"lg\");\n    const closeMobileNav = () => {\n        if (isMobile) {\n            onMobileNavToggle(false);\n        }\n    };\n    return (\n        <Menu\n            theme={sideNavTheme === SIDE_NAV_LIGHT ? \"light\" : \"dark\"}\n            mode=\"inline\"\n            style={{ height: \"100%\", borderRight: 0 }}\n            defaultSelectedKeys={[routeInfo?.key]}\n            defaultOpenKeys={setDefaultOpen(routeInfo?.key)}\n            className={hideGroupTitle ? \"hide-group-title\" : \"\"}\n        >\n            {navigationConfig.map((menu) =>\n                menu.submenu.length > 0 ? (\n                    <Menu.ItemGroup\n                        key={menu.key}\n                        title={setLocale(localization, menu.title)}\n                    >\n                        {menu.submenu.map((subMenuFirst) =>\n                            subMenuFirst.submenu.length > 0 ? (\n                                <SubMenu\n                                    icon={\n                                        subMenuFirst.icon ? (\n                                            <Icon type={subMenuFirst?.icon} />\n                                        ) : null\n                                    }\n                                    key={subMenuFirst.key}\n                                    title={setLocale(\n                                        localization,\n                                        subMenuFirst.title\n                                    )}\n                                >\n                                    {subMenuFirst.submenu.map(\n                                        (subMenuSecond) => (\n                                            <Menu.Item\n                                                key={subMenuSecond[\"key\"]}\n                                            >\n                                                {subMenuSecond[\"icon\"] ? (\n                                                    <Icon\n                                                        type={\n                                                            subMenuSecond[\n                                                                \"icon\"\n                                                            ]\n                                                        }\n                                                    />\n                                                ) : null}\n                                                <span>\n                                                    {setLocale(\n                                                        localization,\n                                                        subMenuSecond[\"icon\"]\n                                                    )}\n                                                </span>\n                                                <Link\n                                                    onClick={() =>\n                                                        closeMobileNav()\n                                                    }\n                                                    to={subMenuSecond[\"path\"]}\n                                                />\n                                            </Menu.Item>\n                                        )\n                                    )}\n                                </SubMenu>\n                            ) : (\n                                <Menu.Item key={subMenuFirst.key}>\n                                    {subMenuFirst.icon ? (\n                                        <Icon type={subMenuFirst.icon} />\n                                    ) : null}\n                                    <span>\n                                        {setLocale(\n                                            localization,\n                                            subMenuFirst.title\n                                        )}\n                                    </span>\n                                    <Link\n                                        onClick={() => closeMobileNav()}\n                                        to={subMenuFirst.path}\n                                    />\n                                </Menu.Item>\n                            )\n                        )}\n                    </Menu.ItemGroup>\n                ) : (\n                    <Menu.Item key={menu.key}>\n                        {menu.icon ? <Icon type={menu?.icon} /> : null}\n                        <span>{setLocale(localization, menu?.title)}</span>\n                        {menu.path ? (\n                            <Link\n                                onClick={() => closeMobileNav()}\n                                to={menu.path}\n                            />\n                        ) : null}\n                    </Menu.Item>\n                )\n            )}\n        </Menu>\n    );\n};\n\nconst TopNavContent = (props: any) => {\n    const { topNavColor, localization } = props;\n    return (\n        <Menu mode=\"horizontal\" style={{ backgroundColor: topNavColor }}>\n            {navigationConfig.map((menu) =>\n                menu.submenu.length > 0 ? (\n                    <SubMenu\n                        key={menu.key}\n                        popupClassName=\"top-nav-menu\"\n                        title={\n                            <span>\n                                {menu.icon ? <Icon type={menu?.icon} /> : null}\n                                <span>\n                                    {setLocale(localization, menu.title)}\n                                </span>\n                            </span>\n                        }\n                    >\n                        {menu.submenu.map((subMenuFirst) =>\n                            subMenuFirst.submenu.length > 0 ? (\n                                <SubMenu\n                                    key={subMenuFirst.key}\n                                    icon={\n                                        subMenuFirst.icon ? (\n                                            <Icon type={subMenuFirst?.icon} />\n                                        ) : null\n                                    }\n                                    title={setLocale(\n                                        localization,\n                                        subMenuFirst.title\n                                    )}\n                                >\n                                    {subMenuFirst.submenu.map(\n                                        (subMenuSecond) => (\n                                            <Menu.Item\n                                                key={subMenuSecond[\"key\"]}\n                                            >\n                                                <span>\n                                                    {setLocale(\n                                                        localization,\n                                                        subMenuSecond[\"title\"]\n                                                    )}\n                                                </span>\n                                                <Link\n                                                    to={subMenuSecond[\"path\"]}\n                                                />\n                                            </Menu.Item>\n                                        )\n                                    )}\n                                </SubMenu>\n                            ) : (\n                                <Menu.Item key={subMenuFirst.key}>\n                                    {subMenuFirst.icon ? (\n                                        <Icon type={subMenuFirst?.icon} />\n                                    ) : null}\n                                    <span>\n                                        {setLocale(\n                                            localization,\n                                            subMenuFirst.title\n                                        )}\n                                    </span>\n                                    <Link to={subMenuFirst.path} />\n                                </Menu.Item>\n                            )\n                        )}\n                    </SubMenu>\n                ) : (\n                    <Menu.Item key={menu.key}>\n                        {menu.icon ? <Icon type={menu?.icon} /> : null}\n                        <span>{setLocale(localization, menu?.title)}</span>\n                        {menu.path ? <Link to={menu.path} /> : null}\n                    </Menu.Item>\n                )\n            )}\n        </Menu>\n    );\n};\n\nconst MenuContent = (props: any) => {\n    return props.type === NAV_TYPE_SIDE ? (\n        <SideNavContent {...props} />\n    ) : (\n        <TopNavContent {...props} />\n    );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { sideNavTheme, topNavColor } = theme as ITheme;\n    return { sideNavTheme, topNavColor };\n};\n\nexport default connect(mapStateToProps, { onMobileNavToggle })(MenuContent);\n","import React, { useEffect } from \"react\";\nimport { Layout } from \"antd\";\nimport { connect } from \"react-redux\";\nimport {\n  SIDE_NAV_WIDTH,\n  SIDE_NAV_DARK,\n  NAV_TYPE_SIDE,\n} from \"../../constants/ThemeConstant\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport MenuContent from \"./MenuContent\";\nimport { IState } from \"../../redux/reducers\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport TranslateText from \"../../utils/translate\";\nimport { APP_NAME } from \"../../configs/AppConfig\";\n\nconst { Sider } = Layout;\n\ninterface SideNavProps {\n  [key: string]: any;\n}\n\nexport const SideNav = ({\n  navCollapsed,\n  sideNavTheme,\n  routeInfo,\n  hideGroupTitle,\n  localization = true,\n}: SideNavProps) => {\n  const props = { sideNavTheme, routeInfo, hideGroupTitle, localization };\n  useEffect(() => {\n    if (routeInfo) {\n      const title = routeInfo.title;\n      document.title = `${TranslateText(title)} | ${APP_NAME}`;\n    } else {\n      document.title = APP_NAME;\n    }\n  }, [routeInfo]);\n  return (\n    <Sider\n      className={`side-nav ${\n        sideNavTheme === SIDE_NAV_DARK ? \"side-nav-dark\" : \"\"\n      }`}\n      width={SIDE_NAV_WIDTH}\n      collapsed={navCollapsed}\n    >\n      <Scrollbars autoHide>\n        <MenuContent type={NAV_TYPE_SIDE} {...props} />\n      </Scrollbars>\n    </Sider>\n  );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n  const { navCollapsed, sideNavTheme } = theme as ITheme;\n  return { navCollapsed, sideNavTheme };\n};\n\nexport default connect(mapStateToProps)(SideNav);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { APP_NAME } from \"../../configs/AppConfig\";\nimport { NAV_TYPE_TOP } from \"../../constants/ThemeConstant\";\nimport { IState } from \"../../redux/reducers\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport utils from \"../../utils\";\nimport TranslateText from \"../../utils/translate\";\nimport MenuContent from \"./MenuContent\";\n\ninterface TopNavProps {\n  topNavColor?: any;\n  localization?: boolean;\n  routeInfo?: any;\n}\n\nexport const TopNav = ({\n  topNavColor,\n  localization = true,\n  routeInfo,\n}: TopNavProps) => {\n  const props = { topNavColor, localization };\n  useEffect(() => {\n    if (routeInfo) {\n      const title = routeInfo.title;\n      document.title = `${TranslateText(title)} | ${APP_NAME}`;\n    } else {\n      document.title = APP_NAME;\n    }\n  }, [routeInfo]);\n  return (\n    <div\n      className={`top-nav ${utils.getColorContrast(topNavColor)}`}\n      style={{ backgroundColor: topNavColor }}\n    >\n      <div className=\"top-nav-wrapper\">\n        <MenuContent type={NAV_TYPE_TOP} {...props} />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n  const { topNavColor } = theme as ITheme;\n  return { topNavColor };\n};\n\nexport default connect(mapStateToProps)(TopNav);\n","import React from \"react\";\nimport {\n    SIDE_NAV_WIDTH,\n    SIDE_NAV_COLLAPSED_WIDTH,\n    NAV_TYPE_TOP,\n} from \"../../constants/ThemeConstant\";\nimport { APP_NAME } from \"../../configs/AppConfig\";\nimport { connect } from \"react-redux\";\nimport utils from \"../../utils\";\nimport { Grid } from \"antd\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\n\ninterface IGetLogo {\n    navCollapsed: boolean;\n    logoType: \"light\" | \"dark\";\n}\nconst { useBreakpoint } = Grid;\n\nconst getLogoWidthGutter = (props: any, isMobile: boolean) => {\n    const { navCollapsed, navType } = props;\n    const isNavTop = navType === NAV_TYPE_TOP ? true : false;\n    if (isMobile && !props.mobileLogo) {\n        return 0;\n    }\n    if (isNavTop) {\n        return \"auto\";\n    }\n    if (navCollapsed) {\n        return `${SIDE_NAV_COLLAPSED_WIDTH}px`;\n    } else {\n        return `${SIDE_NAV_WIDTH}px`;\n    }\n};\n\nconst getLogo = ({ navCollapsed, logoType }: IGetLogo) => {\n    if (logoType === \"light\") {\n        if (navCollapsed) {\n            return process.env.PUBLIC_URL + \"/img/rsz_is_logo-efactura.png\";\n        }\n        return process.env.PUBLIC_URL + \"/img/is_logo-efactura.png\";\n    }\n\n    if (navCollapsed) {\n        return process.env.PUBLIC_URL + \"/img/rsz_is-logo-dark.png\";\n    }\n    return process.env.PUBLIC_URL + \"/img/is-logo-dark.png\";\n};\n\nconst getLogoDisplay = (isMobile: boolean, mobileLogo: boolean) => {\n    if (isMobile && !mobileLogo) {\n        return \"d-none\";\n    } else {\n        return \"logo\";\n    }\n};\n\nexport const Logo = (props: any) => {\n    const isMobile = !utils.getBreakPoint(useBreakpoint()).includes(\"lg\");\n    return (\n        <div\n            className={getLogoDisplay(isMobile, props.mobileLogo)}\n            style={{ width: `${getLogoWidthGutter(props, isMobile)}` }}\n        >\n            <img src={getLogo(props)} alt={`${APP_NAME} logo`} />\n        </div>\n    );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { navCollapsed, navType } = theme as ITheme;\n    return { navCollapsed, navType };\n};\n\nexport default connect(mapStateToProps)(Logo);\n","import React from \"react\";\nimport { Drawer } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { NAV_TYPE_SIDE } from \"../../constants/ThemeConstant\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport MenuContent from \"./MenuContent\";\nimport { onMobileNavToggle } from \"../../redux/actions/Theme\";\nimport Logo from \"./Logo\";\nimport Flex from \"../shared-components/Flex\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\n\ninterface MobileNavProps {\n    [key: string]: any;\n}\n\nexport const MobileNav = ({\n    sideNavTheme,\n    mobileNav,\n    onMobileNavToggle,\n    routeInfo,\n    hideGroupTitle,\n    localization = true,\n}: MobileNavProps) => {\n    const props = { sideNavTheme, routeInfo, hideGroupTitle, localization };\n\n    const onClose = () => {\n        onMobileNavToggle(false);\n    };\n\n    return (\n        <Drawer\n            placement=\"left\"\n            closable={false}\n            onClose={onClose}\n            visible={mobileNav}\n            bodyStyle={{ padding: 5 }}\n        >\n            <Flex flexDirection=\"column\" className=\"h-100\">\n                <Flex justifyContent=\"between\" alignItems=\"center\">\n                    <Logo mobileLogo={true} />\n                    <div className=\"nav-close\" onClick={() => onClose()}>\n                        <ArrowLeftOutlined />\n                    </div>\n                </Flex>\n                <div className=\"mobile-nav-menu\">\n                    <Scrollbars autoHide>\n                        <MenuContent type={NAV_TYPE_SIDE} {...props} />\n                    </Scrollbars>\n                </div>\n            </Flex>\n        </Drawer>\n    );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { navCollapsed, sideNavTheme, mobileNav } = theme as ITheme;\n    return { navCollapsed, sideNavTheme, mobileNav };\n};\n\nexport default connect(mapStateToProps, { onMobileNavToggle })(MobileNav);\n","import React, { ReactNode, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Radio, Switch, Grid } from \"antd\";\nimport {\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange,\n} from \"../../redux/actions/Theme\";\nimport NavLanguage from \"./NavLanguage\";\nimport {\n  SIDE_NAV_LIGHT,\n  NAV_TYPE_SIDE,\n  NAV_TYPE_TOP,\n  SIDE_NAV_DARK,\n} from \"../../constants/ThemeConstant\";\nimport AppLocale from \"../../lang\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nimport Utils from \"../../utils/index\";\nimport { IState } from \"../../redux/reducers\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { SUBDIR_PATH } from \"../../configs/AppConfig\";\n\nexport interface IListOption {\n  name?: string | ReactNode;\n  selector?: any;\n  disabled?: boolean;\n  vertical?: boolean;\n}\ninterface IThemeConfigurator {\n  [key: string]: any;\n}\n\nconst colorOptions = [\"#3e82f7\", \"#24a772\", \"#de4436\", \"#924aca\", \"#193550\"];\n\nconst white = \"#ffffff\";\n\nconst ListOption = ({ name, selector, disabled, vertical }: IListOption) => (\n  <div\n    className={`my-4 ${\n      vertical ? \"\" : \"d-flex align-items-center justify-content-between\"\n    }`}\n  >\n    <div\n      className={`${disabled ? \"opacity-0-3\" : \"\"} ${vertical ? \"mb-3\" : \"\"}`}\n    >\n      {name}\n    </div>\n    <div>{selector}</div>\n  </div>\n);\n\nconst ThemeConfigurator = ({\n  navType,\n  sideNavTheme,\n  navCollapsed,\n  topNavColor,\n  headerNavColor,\n  locale,\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange,\n}: IThemeConfigurator) => {\n  const { useBreakpoint } = Grid;\n  const screens = Utils.getBreakPoint(useBreakpoint());\n  const isMobile = !screens.includes(\"lg\");\n  const isNavTop = navType === NAV_TYPE_TOP;\n  const AppCurrentLocale = AppLocale[locale];\n  const isCollapse = navCollapsed;\n\n  const ontopNavColorClick = (value: any) => {\n    if (value === white) {\n      onHeaderNavColorChange(\"#193550\");\n      onTopNavColorChange(white);\n    } else {\n      onTopNavColorChange(value);\n      onHeaderNavColorChange(white);\n    }\n  };\n  const onHeaderNavColorClick = (value: any) => {\n    if (value === white) {\n      onTopNavColorChange(colorOptions[0]);\n    }\n    onHeaderNavColorChange(value);\n  };\n\n  const onNavTypeClick = (value: any) => {\n    if (value === NAV_TYPE_TOP) {\n      onTopNavColorChange(colorOptions[0]);\n      onHeaderNavColorChange(white);\n      toggleCollapsedNav(false);\n    }\n    if (value === NAV_TYPE_TOP) {\n      onHeaderNavColorChange(white);\n    }\n    onNavTypeChange(value);\n  };\n\n  return (\n    <>\n      <div className=\"mb-5\">\n        <h4 className=\"mb-3 font-weight-bold\">\n          <IntlMessage id={\"theme.Navigation\"} />\n        </h4>\n        {isNavTop ? (\n          <ListOption\n            name={<IntlMessage id={\"theme.TopNavColor\"} />}\n            vertical\n            selector={\n              <Radio.Group\n                className=\"color-selector\"\n                onChange={(e) => ontopNavColorClick(e.target.value)}\n                value={topNavColor}\n              >\n                {colorOptions.map((color) => (\n                  <Radio\n                    key={color}\n                    style={{ backgroundColor: color }}\n                    value={color}\n                  />\n                ))}\n                <Radio\n                  className=\"bg-white\"\n                  key={white}\n                  style={{ backgroundColor: white }}\n                  value={white}\n                />\n              </Radio.Group>\n            }\n          />\n        ) : (\n          <ListOption\n            name={<IntlMessage id={\"theme.HeaderNavColor\"} />}\n            vertical\n            selector={\n              <Radio.Group\n                className=\"color-selector\"\n                onChange={(e) => onHeaderNavColorClick(e.target.value)}\n                value={headerNavColor}\n              >\n                {colorOptions.map((color) => (\n                  <Radio\n                    key={color}\n                    style={{ backgroundColor: color }}\n                    value={color}\n                  />\n                ))}\n                <Radio\n                  className=\"bg-white\"\n                  key={white}\n                  style={{ backgroundColor: white }}\n                  value={white}\n                />\n              </Radio.Group>\n            }\n          />\n        )}\n\n        {isMobile || (\n          <>\n            <ListOption\n              name={<IntlMessage id={\"theme.NavigationType\"} />}\n              selector={\n                <Radio.Group\n                  size=\"small\"\n                  onChange={(e) => onNavTypeClick(e.target.value)}\n                  value={navType}\n                >\n                  <Radio.Button value={NAV_TYPE_SIDE}>\n                    {<IntlMessage id={\"theme.Side\"} />}\n                  </Radio.Button>\n                  <Radio.Button value={NAV_TYPE_TOP}>\n                    {<IntlMessage id={\"theme.Top\"} />}\n                  </Radio.Button>\n                </Radio.Group>\n              }\n            />\n            <ListOption\n              name={<IntlMessage id={\"theme.SideNavColor\"} />}\n              selector={\n                <Radio.Group\n                  disabled={isNavTop}\n                  size=\"small\"\n                  onChange={(e) => onNavStyleChange(e.target.value)}\n                  value={sideNavTheme}\n                >\n                  <Radio.Button value={SIDE_NAV_LIGHT}>\n                    {<IntlMessage id={\"theme.Light\"} />}\n                  </Radio.Button>\n                  <Radio.Button value={SIDE_NAV_DARK}>\n                    {<IntlMessage id={\"theme.Dark\"} />}\n                  </Radio.Button>\n                </Radio.Group>\n              }\n              disabled={isNavTop}\n            />\n            <ListOption\n              name={<IntlMessage id={\"theme.SideNavCollapse\"} />}\n              selector={\n                <Switch\n                  disabled={isNavTop}\n                  checked={isCollapse}\n                  onChange={() => toggleCollapsedNav(!navCollapsed)}\n                />\n              }\n              disabled={isNavTop}\n            />\n          </>\n        )}\n      </div>\n      <div className=\"mb-5\">\n        <h4 className=\"mb-3 font-weight-bold\">\n          {<IntlMessage id={\"theme.Locale\"} />}\n        </h4>\n        <ListOption\n          name={<IntlMessage id={\"theme.Language\"} />}\n          selector={<NavLanguage configDisplay triggerType={\"click\"} />}\n        />\n      </div>\n      {/* Copy to clipboard Theme Config */}\n      {/*<div>*/}\n      {/*  <CopyToClipboard*/}\n      {/*    text={genCopySettingJson({*/}\n      {/*      navType,*/}\n      {/*      sideNavTheme,*/}\n      {/*      navCollapsed,*/}\n      {/*      topNavColor,*/}\n      {/*      headerNavColor,*/}\n      {/*      locale,*/}\n      {/*    })}*/}\n      {/*    onCopy={() =>*/}\n      {/*      message.success(*/}\n      {/*        \"Copy Success, please paste it to src/configs/AppConfig.js THEME_CONFIG variable.\"*/}\n      {/*      )*/}\n      {/*    }*/}\n      {/*  >*/}\n      {/*    <Button icon={<CopyOutlined />} block>*/}\n      {/*      <span>Copy Setting</span>*/}\n      {/*    </Button>*/}\n      {/*  </CopyToClipboard>*/}\n      {/*</div>*/}\n    </>\n  );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n  const {\n    navType,\n    sideNavTheme,\n    navCollapsed,\n    topNavColor,\n    headerNavColor,\n    locale,\n  } = theme as ITheme;\n  return {\n    navType,\n    sideNavTheme,\n    navCollapsed,\n    topNavColor,\n    headerNavColor,\n    locale,\n  };\n};\n\nconst mapDispatchToProps = {\n  toggleCollapsedNav,\n  onNavTypeChange,\n  onNavStyleChange,\n  onTopNavColorChange,\n  onHeaderNavColorChange,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ThemeConfigurator);\n","import React, { Component } from \"react\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { Drawer, Menu } from \"antd\";\nimport { connect } from \"react-redux\";\nimport ThemeConfigurator from \"./ThemeConfigurator\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nimport { Tooltip } from \"antd\";\nimport { IState } from \"../../redux/reducers\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\n\nclass NavPanel extends Component {\n    state = { visible: false };\n\n    showDrawer = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    onClose = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    render() {\n        return (\n            <>\n                <Menu mode=\"horizontal\">\n                    <Menu.Item onClick={this.showDrawer}>\n                        <Tooltip\n                            title={<IntlMessage id={\"sidenav.settings\"} />}\n                        >\n                            <SettingOutlined className=\"nav-icon mr-0\" />\n                        </Tooltip>\n                    </Menu.Item>\n                </Menu>\n                <Drawer\n                    title={<IntlMessage id={\"theme.Title\"} />}\n                    placement=\"right\"\n                    width={370}\n                    onClose={this.onClose}\n                    visible={this.state.visible}\n                >\n                    <ThemeConfigurator />\n                </Drawer>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { locale } = theme as ITheme;\n    return { locale };\n};\n\nexport default connect(mapStateToProps)(NavPanel);\n","import * as React from \"react\";\nimport { useState, useRef } from \"react\";\nimport {\n    DashboardOutlined,\n    AppstoreOutlined,\n    AntDesignOutlined,\n    FileTextOutlined,\n    SearchOutlined,\n} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport { AutoComplete, Input } from \"antd\";\nimport IntlMessage from \"../../util-components/IntlMessage\";\nimport navigationConfig, { INavTree } from \"../../../configs/NavigationConfig\";\n\ninterface ISearchInput {\n    active?: boolean;\n    close?: any;\n    isMobile?: boolean;\n    mode?: \"light\" | \"dark\";\n}\n\nfunction getOptionList(navigationTree: INavTree[], optionTree?: any) {\n    optionTree = optionTree ? optionTree : [];\n    for (const navItem of navigationTree) {\n        if (navItem.submenu.length === 0) {\n            optionTree.push(navItem);\n        }\n        if (navItem.submenu.length > 0) {\n            getOptionList(navItem.submenu, optionTree);\n        }\n    }\n    return optionTree;\n}\n\nconst optionList = getOptionList(navigationConfig);\n\nconst getCategoryIcon = (category: string) => {\n    switch (category) {\n        case \"dashboards\":\n            return <DashboardOutlined className=\"text-success\" />;\n        case \"apps\":\n            return <AppstoreOutlined className=\"text-danger\" />;\n        case \"components\":\n            return <AntDesignOutlined className=\"text-primary\" />;\n        case \"extra\":\n            return <FileTextOutlined className=\"text-warning\" />;\n        default:\n            return null;\n    }\n};\n\nconst searchResult = () =>\n    optionList.map((item: any) => {\n        const category = item.key.split(\"-\")[0];\n        return {\n            value: item.path,\n            label: (\n                <Link to={item.path}>\n                    <div className=\"search-list-item\">\n                        <div className=\"icon\">{getCategoryIcon(category)}</div>\n                        <div>\n                            <div className=\"font-weight-semibold\">\n                                <IntlMessage id={item.title} />\n                            </div>\n                            <div className=\"font-size-sm text-muted\">\n                                {category}{\" \"}\n                            </div>\n                        </div>\n                    </div>\n                </Link>\n            ),\n        };\n    });\n\nconst SearchInput = (props: ISearchInput) => {\n    const { active, close, isMobile, mode } = props;\n    const [value, setValue] = useState(\"\");\n    const [options, setOptions] = useState([]);\n    const inputRef = useRef(null);\n\n    const onSelect = () => {\n        setValue(\"\");\n        setOptions([]);\n        if (close) {\n            close();\n        }\n    };\n\n    const onSearch = (searchText: any) => {\n        setValue(searchText);\n        // setOptions(!searchText ? [] : searchResult(searchText))\n    };\n    //\n    // const autofocus = () => {\n    // \tinputRef.current.focus();\n    // }\n\n    // if(active) {\n    // \tautofocus()\n    // }\n\n    return (\n        <AutoComplete\n            ref={inputRef}\n            className={`nav-search-input ${isMobile ? \"is-mobile\" : \"\"} ${\n                mode === \"light\" ? \"light\" : \"\"\n            }`}\n            dropdownClassName=\"nav-search-dropdown\"\n            options={options}\n            onSelect={onSelect}\n            onSearch={onSearch}\n            value={value}\n            filterOption={(inputValue, option) =>\n                option!.value\n                    .toUpperCase()\n                    .indexOf(inputValue.toUpperCase()) !== -1\n            }\n        >\n            <Input\n                placeholder=\"Search...\"\n                prefix={<SearchOutlined className=\"mr-0\" />}\n            />\n        </AutoComplete>\n    );\n};\nexport default SearchInput;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport Utils from \"../../../utils\";\nimport SearchInput from \"./SearchInput\";\nimport { IState } from \"../../../redux/reducers\";\nimport { ITheme } from \"../../../redux/reducers/Theme\";\n\ninterface INavSearch {\n    active?: any;\n    close?: any;\n    headerNavColor?: string;\n}\n\nexport const NavSearch = (props: INavSearch) => {\n    const { active, close, headerNavColor } = props;\n    const mode = Utils.getColorContrast(headerNavColor);\n\n    return (\n        <div\n            className={`nav-search ${\n                active ? \"nav-search-active\" : \"\"\n            } ${mode}`}\n            style={{ backgroundColor: headerNavColor }}\n        >\n            <div className=\"d-flex align-items-center w-100\">\n                <SearchInput close={close} active={active} />\n            </div>\n            <div className=\"nav-close\" onClick={close}>\n                <CloseOutlined />\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { headerNavColor } = theme as ITheme;\n    return { headerNavColor };\n};\n\nexport default connect(mapStateToProps, {})(NavSearch);\n","import React, { useEffect } from \"react\";\nimport { Menu, Dropdown, Avatar, Modal } from \"antd\";\nimport { connect } from \"react-redux\";\nimport {\n  // EditOutlined,\n  SettingOutlined,\n  // ShopOutlined,\n  QuestionCircleOutlined,\n  LogoutOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport Icon from \"../util-components/Icon\";\nimport { signOut } from \"../../redux/actions/Auth\";\nimport { NavLink } from \"react-router-dom\";\nimport { IntlProvider } from \"react-intl\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nimport AppLocale from \"../../lang\";\nimport { clearSettings } from \"../../redux/actions/Account\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\nimport { IAccount } from \"../../redux/reducers/Account\";\nimport TranslateText from \"../../utils/translate\";\ninterface INavProfile {\n  signOut?: () => void;\n  FirstName?: string;\n  Photo?: string;\n  locale?: any;\n}\nconst menuItem = [\n  {\n    title: <IntlMessage id={\"header.profile.AccountSettings\"} />,\n    icon: SettingOutlined,\n    path: \"/app/account-settings\",\n  },\n  {\n    title: <IntlMessage id={\"header.profile.HelpCenter\"} />,\n    icon: QuestionCircleOutlined,\n    path: \"/\",\n  },\n];\n\nconst NavProfile = ({ signOut, FirstName, Photo, locale }: INavProfile) => {\n  const currentAppLocale = AppLocale[locale];\n  const { confirm } = Modal;\n  const confirmLogout = () => {\n    confirm({\n      title: TranslateText(\"header.logout.message\"),\n      onOk: () => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(signOut!());\n          }, 1000);\n        });\n      },\n    });\n  };\n\n  const profileMenu = (\n    <div className=\"nav-profile nav-dropdown\">\n      <div className=\"nav-profile-header\">\n        <div className=\"d-flex\">\n          <Avatar size={45} src={Photo} icon={<UserOutlined />} />\n          <div className=\"pl-3\">\n            <h4 className=\"mb-0\">{FirstName}</h4>\n          </div>\n        </div>\n      </div>\n      <div className=\"nav-profile-body\">\n        <Menu selectable={false}>\n          {menuItem.map((el, i) => {\n            return (\n              <Menu.Item key={i}>\n                <NavLink to={el.path}>\n                  <Icon className=\"mr-3\" type={el.icon} />\n                  <span className=\"font-weight-normal\">{el.title}</span>\n                </NavLink>\n              </Menu.Item>\n            );\n          })}\n          <Menu.Item key={menuItem.length + 1} onClick={confirmLogout}>\n            <span>\n              <LogoutOutlined className=\"mr-3\" />\n              <span className=\"font-weight-normal\">\n                <IntlMessage id={\"header.profile.SignOut\"} />\n              </span>\n            </span>\n          </Menu.Item>\n        </Menu>\n      </div>\n    </div>\n  );\n  return (\n    <Dropdown placement=\"bottomRight\" overlay={profileMenu} trigger={[\"click\"]}>\n      <Menu className=\"d-flex align-item-center\" mode=\"horizontal\">\n        <Menu.Item>\n          <Avatar src={Photo} icon={<UserOutlined />} />\n        </Menu.Item>\n      </Menu>\n    </Dropdown>\n  );\n};\n\nconst mapStateToProps = ({ account, theme }: IState) => {\n  const { FirstName, Photo } = account as IAccount;\n  const { locale } = theme as ITheme;\n  return { FirstName, Photo, locale };\n};\n\nexport default connect(mapStateToProps, { signOut })(NavProfile);\n","import { Menu } from \"antd\";\nimport { Avatar } from \"antd\";\nimport { ExperimentOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport \"./applications.scss\";\nimport { APP_PREFIX_PATH } from \"../../../configs/AppConfig\";\nimport { Link } from \"react-router-dom\";\nconst AppNavGrid = (props: any) => {\n  return (\n    <>\n      {props.apps &&\n        props.apps.map((app: any) => (\n          <Menu.Item key={app.Name} {...props} className=\"app-list__item\">\n            <Link to={`${APP_PREFIX_PATH}/id/${app.AppType}`}>\n              <div className=\"text-center\">\n                <Avatar\n                  src={app.Photo}\n                  icon={<ExperimentOutlined />}\n                  shape=\"square\"\n                  alt={app.Name}\n                  style={{ marginBottom: \"10px\" }}\n                />\n              </div>\n              <p className=\"text-center\">{app.Name}</p>\n            </Link>\n          </Menu.Item>\n        ))}\n    </>\n  );\n};\n\nexport default AppNavGrid;\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { AppstoreOutlined } from \"@ant-design/icons\";\nimport { Menu, Dropdown, Empty, Tooltip } from \"antd\";\nimport IntlMessage from \"../../../components/util-components/IntlMessage\";\nimport AppNavGrid from \"./AppNavGrid\";\nimport { useSelector } from \"react-redux\";\nimport Loading from \"../../../components/shared-components/Loading\";\nimport { AppService } from \"../../../api\";\nimport { IState } from \"../../../redux/reducers\";\nimport { IMarketAppList } from \"../../../api/types.response\";\n\nconst AppStoreNav = () => {\n  const loading = useSelector((state: IState) => state[\"auth\"]!.loading);\n  const [apps, setApps] = useState<IMarketAppList[]>([]);\n  const renderApps = async () => {\n    return await new AppService().GetMarketAppList().then((data) => {\n      if (data) {\n        setApps(data.MarketAppList);\n      }\n    });\n  };\n  const menu = (\n    <Menu\n      style={{\n        width: \"330px\",\n        minHeight: loading ? \"300px\" : \"auto\",\n      }}\n    >\n      {loading ? (\n        <Loading cover=\"content\" align=\"center\" />\n      ) : (\n        <AppNavGrid apps={apps} />\n      )}\n      {apps.length > 0 || <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={menu} trigger={[\"click\"]} placement={\"bottomRight\"}>\n      <Menu mode={\"horizontal\"} onClick={() => renderApps()}>\n        <Menu.Item>\n          <Tooltip title={<IntlMessage id=\"header.applications\" />}>\n            <AppstoreOutlined className={\"nav-icon\"} />\n          </Tooltip>\n        </Menu.Item>\n      </Menu>\n    </Dropdown>\n  );\n};\n\nexport default AppStoreNav;\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Menu, Layout } from \"antd\";\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from \"@ant-design/icons\";\nimport Logo from \"./Logo\";\nimport NavPanel from \"./NavPanel\";\nimport NavSearch from \"./NavSearch\";\nimport {\n  toggleCollapsedNav,\n  onMobileNavToggle,\n  onHeaderNavColorChange,\n} from \"../../redux/actions/Theme\";\nimport {\n  NAV_TYPE_TOP,\n  SIDE_NAV_COLLAPSED_WIDTH,\n  SIDE_NAV_WIDTH,\n} from \"../../constants/ThemeConstant\";\nimport utils from \"../../utils\";\nimport NavProfile from \"./NavProfile\";\nimport AppStoreNav from \"../../views/app-views/applications/AppNav\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\nimport { IAccount } from \"../../redux/reducers/Account\";\nimport { AppService } from \"../../api\";\nimport { SUBDIR_PATH } from \"../../configs/AppConfig\";\n\nconst { Header } = Layout;\n\nconst HeaderNav = (props: any) => {\n  const {\n    navCollapsed,\n    mobileNav,\n    navType,\n    headerNavColor,\n    toggleCollapsedNav,\n    onMobileNavToggle,\n    isMobile,\n    history,\n    CompanyID,\n  } = props;\n  const [searchActive, setSearchActive] = useState(false);\n\n  const onSearchClose = () => {\n    setSearchActive(false);\n  };\n  const [currentCompany, setCurrentCompany] = useState(\"\");\n\n  useEffect(() => {\n    new AppService().GetCompanyInfo().then((data) => {\n      if (data && data.ErrorCode === 0)\n        setCurrentCompany(data.Company.CommercialName ?? \"\");\n    });\n  }, []);\n  const onToggle = () => {\n    if (!isMobile) {\n      toggleCollapsedNav(!navCollapsed);\n    } else {\n      onMobileNavToggle(!mobileNav);\n    }\n  };\n\n  const isNavTop = navType === NAV_TYPE_TOP;\n  const mode = utils.getColorContrast(headerNavColor);\n  const getNavWidth = () => {\n    if (isNavTop || isMobile) {\n      return \"0px\";\n    }\n    if (navCollapsed) {\n      return `${SIDE_NAV_COLLAPSED_WIDTH}px`;\n    } else {\n      return `${SIDE_NAV_WIDTH}px`;\n    }\n  };\n  return (\n    <Header\n      className={`app-header ${mode}`}\n      style={{ backgroundColor: headerNavColor }}\n    >\n      <div className={`app-header-wrapper ${isNavTop ? \"layout-top-nav\" : \"\"}`}>\n        <Logo logoType={mode} />\n        <div\n          className=\"nav\"\n          style={{\n            width: `calc(100% - ${getNavWidth()})`,\n          }}\n        >\n          <div className=\"nav-left\">\n            <Menu mode=\"horizontal\">\n              {isNavTop && !isMobile ? null : (\n                <Menu.Item\n                  key=\"0\"\n                  onClick={() => {\n                    onToggle();\n                  }}\n                >\n                  {navCollapsed || isMobile ? (\n                    <MenuUnfoldOutlined className=\"nav-icon\" />\n                  ) : (\n                    <MenuFoldOutlined className=\"nav-icon\" />\n                  )}\n                </Menu.Item>\n              )}\n            </Menu>\n          </div>\n          <div className=\"nav-left\">\n            {!isNavTop && CompanyID === 1 ? (\n              <div\n                className={`text-${\n                  headerNavColor === \"#ffffff\" ? \"dark\" : \"white\"\n                } px-5`}\n                style={{ fontSize: \"20px\" }}\n              >\n                {`ATENTIE! Administrati: ${currentCompany}`}\n              </div>\n            ) : null}\n          </div>\n          <div className=\"nav-right\">\n            <AppStoreNav />\n            <NavPanel />\n            <NavProfile />\n          </div>\n          <NavSearch active={searchActive} close={onSearchClose} />\n        </div>\n      </div>\n    </Header>\n  );\n};\n\nconst mapStateToProps = ({ theme, account }: IState) => {\n  const { navCollapsed, navType, headerNavColor, mobileNav } = theme as ITheme;\n  const { CompanyID } = account as IAccount;\n  return { navCollapsed, navType, headerNavColor, mobileNav, CompanyID };\n};\n\nexport default connect(mapStateToProps, {\n  toggleCollapsedNav,\n  onMobileNavToggle,\n})(HeaderNav);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Breadcrumb } from \"antd\";\nimport navigationConfig from \"../../configs/NavigationConfig\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nlet breadcrumbData = {\n  \"/app\": <IntlMessage id=\"home\" />,\n} as { [key: string]: any };\n\nnavigationConfig.forEach((elm, i) => {\n  const assignBreadcrumb = (obj: any) =>\n    (breadcrumbData[obj.path] = <IntlMessage id={obj.title} />);\n  assignBreadcrumb(elm);\n  if (elm.submenu) {\n    elm.submenu.forEach((elm) => {\n      assignBreadcrumb(elm);\n      if (elm.submenu) {\n        elm.submenu.forEach((elm) => {\n          assignBreadcrumb(elm);\n        });\n      }\n    });\n  }\n});\n\nconst BreadcrumbRoute = withRouter((props) => {\n  const { location } = props;\n  const pathSnippets = location.pathname.split(\"/\").filter((i: any) => i);\n  const buildBreadcrumb = pathSnippets.map((_: any, index: any) => {\n    const url = `/${pathSnippets.slice(0, index + 1).join(\"/\")}`;\n    return (\n      <Breadcrumb.Item key={url}>\n        {/*<Link to={url}>{breadcrumbData[url]}</Link>*/}\n      </Breadcrumb.Item>\n    );\n  });\n\n  return <Breadcrumb>{buildBreadcrumb}</Breadcrumb>;\n});\n\nexport class AppBreadcrumb extends Component {\n  render() {\n    return <BreadcrumbRoute />;\n  }\n}\n\nexport default AppBreadcrumb;\n","import React from \"react\";\nimport AppBreadcrumb from \"./AppBreadcrumb\";\nimport IntlMessage from \"../util-components/IntlMessage\";\nexport interface IPageHeader {\n    title: string;\n    display: boolean;\n}\nexport const PageHeader = ({ title, display }: IPageHeader) => {\n    return display ? (\n        <div className=\"app-page-header\">\n            <h3 className=\"mb-0 mr-3 font-weight-semibold\">\n                <IntlMessage id={title ? title : \"\"} />\n            </h3>\n            <AppBreadcrumb />\n        </div>\n    ) : null;\n};\n\nexport default PageHeader;\n","import React from 'react'\nimport { APP_NAME } from '../../configs/AppConfig';\nimport IntlMessage from \"../util-components/IntlMessage\";\n\nexport default function Footer() {\n\treturn (\n\t\t<footer className=\"footer\">\n\t\t\t<span>Copyright  &copy;  {`${new Date().getFullYear()}`} <span className=\"font-weight-semibold\">{`${APP_NAME}`}</span>{\". \"}<IntlMessage id={\"auth.Rights\"}/></span>\n\t\t\t<div>\n\t\t\t\t<a className=\"text-gray\" href=\"/#\" onClick={e => e.preventDefault()}><IntlMessage id={\"auth.Terms&Conditions\"}/></a>\n\t\t\t\t<span className=\"mx-2 text-muted\"> | </span>\n\t\t\t\t<a className=\"text-gray\" href=\"/#\" onClick={e => e.preventDefault()}><IntlMessage id={\"auth.Privacy&Policy\"}/></a>\n\t\t\t</div>\n\t\t</footer>\n\t)\n}\n\n","import React, { lazy, Suspense } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Loading from \"../../components/shared-components/Loading\";\nimport { APP_PREFIX_PATH } from \"../../configs/AppConfig\";\n\nexport const AppViews = () => {\n  return (\n    <Suspense fallback={<Loading cover=\"content\" />}>\n      <Switch>\n        <Route\n          path={`${APP_PREFIX_PATH}/dashboard`}\n          component={lazy(() => import(`./dashboard`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/news`}\n          component={lazy(() => import(`./news`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/my-applications`}\n          exact\n          component={lazy(() => import(`./applications/my-apps`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/market`}\n          exact\n          component={lazy(() => import(`./applications/market`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/id/:appID`}\n          component={lazy(() => import(`./applications/single-app-page`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/catalog/company`}\n          component={lazy(() => import(`./catalog/company`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/catalog/users`}\n          component={lazy(() => import(`./catalog/users/`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/catalog/group`}\n          component={lazy(() => import(`./catalog/group`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/security/history`}\n          component={lazy(() => import(`./security/history`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/security/rules`}\n          component={lazy(() => import(`./security/rules`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/audit`}\n          component={lazy(() => import(`./audit/all`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/audit/login-history`}\n          component={lazy(() => import(`./audit/login-history`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/reports`}\n          component={lazy(() => import(`./reports`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/payments`}\n          component={lazy(() => import(`./payments`))}\n        />\n        <Route\n          path={`${APP_PREFIX_PATH}/account-settings`}\n          component={lazy(() => import(`./account-settings`))}\n        />\n        <Redirect\n          from={`${APP_PREFIX_PATH}`}\n          to={`${APP_PREFIX_PATH}/dashboard`}\n        />\n      </Switch>\n    </Suspense>\n  );\n};\n\nexport default React.memo(AppViews);\n","import React from \"react\";\nimport { Layout, Grid } from \"antd\";\nimport { connect } from \"react-redux\";\nimport SideNav from \"../../components/layout-components/SideNav\";\nimport TopNav from \"../../components/layout-components/TopNav\";\nimport MobileNav from \"../../components/layout-components/MobileNav\";\nimport HeaderNav from \"../../components/layout-components/HeaderNav\";\nimport PageHeader from \"../../components/layout-components/PageHeader\";\nimport Footer from \"../../components/layout-components/Footer\";\nimport AppViews from \"../../views/app-views\";\nimport navigationConfig from \"../../configs/NavigationConfig\";\nimport {\n    SIDE_NAV_WIDTH,\n    SIDE_NAV_COLLAPSED_WIDTH,\n    NAV_TYPE_SIDE,\n    NAV_TYPE_TOP,\n} from \"../../constants/ThemeConstant\";\nimport Utils from \"../../utils\";\nimport { ITheme } from \"../../redux/reducers/Theme\";\nimport { IState } from \"../../redux/reducers\";\n\nconst { Content } = Layout;\nconst { useBreakpoint } = Grid;\n\nexport const AppLayout = ({ navCollapsed, navType, location }: any) => {\n    const currentRouteInfo = Utils.getRouteInfo(\n        navigationConfig,\n        location.pathname\n    );\n    const screens = Utils.getBreakPoint(useBreakpoint());\n    const isMobile = !screens.includes(\"lg\");\n    const isNavSide = navType === NAV_TYPE_SIDE;\n    const isNavTop = navType === NAV_TYPE_TOP;\n\n    const getLayoutGutter = () => {\n        if (isNavTop || isMobile) {\n            return 0;\n        }\n        return navCollapsed ? SIDE_NAV_COLLAPSED_WIDTH : SIDE_NAV_WIDTH;\n    };\n    return (\n        <Layout>\n            <HeaderNav isMobile={isMobile} />\n            {isNavTop && !isMobile ? (\n                <TopNav routeInfo={currentRouteInfo} />\n            ) : null}\n            <Layout className=\"app-container\">\n                {isNavSide && !isMobile ? (\n                    <SideNav routeInfo={currentRouteInfo} />\n                ) : null}\n                <Layout\n                    className=\"app-layout\"\n                    style={{ paddingLeft: getLayoutGutter() }}\n                >\n                    <div\n                        className={`app-content ${\n                            isNavTop ? \"layout-top-nav\" : \"\"\n                        }`}\n                    >\n                        <PageHeader\n                            display={currentRouteInfo?.breadcrumb}\n                            title={currentRouteInfo?.title}\n                        />\n                        <Content>\n                            <AppViews />\n                        </Content>\n                    </div>\n                    <Footer />\n                </Layout>\n            </Layout>\n            {isMobile && <MobileNav />}\n        </Layout>\n    );\n};\n\nconst mapStateToProps = ({ theme }: IState) => {\n    const { navCollapsed, navType, locale } = theme as ITheme;\n    return { navCollapsed, navType, locale };\n};\n\nexport default connect(mapStateToProps)(React.memo(AppLayout));\n","import React, { lazy, Suspense, useEffect } from \"react\";\nimport { Switch, Route, Redirect, RouteComponentProps } from \"react-router-dom\";\nimport Loading from \"../../components/shared-components/Loading\";\nimport { APP_NAME } from \"../../configs/AppConfig\";\n\nexport const AuthViews = ({ match }: RouteComponentProps) => {\n    useEffect(() => {\n        document.title = APP_NAME;\n    }, []);\n    return (\n        <Suspense fallback={<Loading cover=\"page\" />}>\n            <Switch>\n                <Route\n                    path={`${match.url}/login`}\n                    component={lazy(() => import(`./authentication/login`))}\n                />\n                <Route\n                    path={`${match.url}/register`}\n                    component={lazy(() => import(`./authentication/register`))}\n                />\n                <Route\n                    path={`${match.url}/forgot-password`}\n                    component={lazy(\n                        () => import(`./authentication/forgot-password`)\n                    )}\n                />\n                <Route\n                    path={`${match.url}/404`}\n                    component={lazy(() => import(`./errors/error-page-1`))}\n                />\n                <Route\n                    path={`${match.url}/validate/:token`}\n                    component={lazy(() => import(`./authentication/validate`))}\n                />\n\n                <Route\n                    path={`${match.url}/admin/:Token`}\n                    component={lazy(() => import(`./authentication/admin`))}\n                />\n                <Route\n                    path={`${match.url}/confirm`}\n                    component={lazy(() => import(`./authentication/confirm`))}\n                />\n\n                {/*<Route*/}\n                {/*  path={`${match.url}/error-2`}*/}\n                {/*  component={lazy(() => import(`./errors/error-page-2`))}*/}\n                {/*/>*/}\n                <Redirect from={`${match.url}`} to={`${match.url}/login`} />\n            </Switch>\n        </Suspense>\n    );\n};\n\nexport default AuthViews;\n","import React, {useEffect} from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport AuthViews from \"../../views/auth-views\";\n// import {AUTH_TOKEN, SIGNOUT} from \"../../redux/constants/Auth\"\n// import store from '../../redux/store';\n\nexport const AuthLayout = () => {\n  // useEffect(() => {\n  //   store.dispatch({ type: SIGNOUT});\n  //   localStorage.removeItem(AUTH_TOKEN);\n  // }, [])\n  return (\n    <div className=\"auth-container\">\n      <Switch>\n        <Route path=\"\" component={AuthViews} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default AuthLayout;\n","import React, { useEffect } from \"react\";\nimport {\n  Route,\n  Switch,\n  Redirect,\n  withRouter,\n  RouteComponentProps,\n} from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppLayout from \"../layouts/app-layout\";\nimport AuthLayout from \"../layouts/auth-layout\";\nimport AppLocale from \"../lang\";\nimport { IntlProvider } from \"react-intl\";\nimport { ConfigProvider } from \"antd\";\nimport { signOut } from \"../redux/actions/Auth\";\nimport {\n  APP_NAME,\n  APP_PREFIX_PATH,\n  AUTH_PREFIX_PATH,\n  SUBDIR_PATH,\n} from \"../configs/AppConfig\";\nimport { IState } from \"../redux/reducers\";\nimport { ITheme } from \"../redux/reducers/Theme\";\nimport { IAuth } from \"../redux/reducers/Auth\";\n\nfunction RouteInterceptor({ children, isAuthenticated, ...rest }: any) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: AUTH_PREFIX_PATH + \"/login\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\ninterface IDispatch {\n  signOut: any;\n}\ninterface IViews extends ITheme, IAuth, RouteComponentProps, IDispatch {}\nexport const Views = (props: IViews) => {\n  const { locale, location, token, signOut } = props;\n  const currentAppLocale = locale ? AppLocale[locale] : \"en\";\n  useEffect(() => {\n    localStorage.getItem(`${SUBDIR_PATH}`) || signOut();\n  }, [localStorage.getItem(`${SUBDIR_PATH}`)]);\n  return (\n    <IntlProvider\n      locale={currentAppLocale.locale}\n      messages={currentAppLocale.messages}\n    >\n      <ConfigProvider locale={currentAppLocale.antd}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to={APP_PREFIX_PATH} />\n          </Route>\n          <Route path={AUTH_PREFIX_PATH}>\n            <AuthLayout />\n          </Route>\n          <RouteInterceptor path={APP_PREFIX_PATH} isAuthenticated={token}>\n            <AppLayout location={location} />\n          </RouteInterceptor>\n        </Switch>\n      </ConfigProvider>\n    </IntlProvider>\n  );\n};\n\nconst mapStateToProps = ({ theme, auth }: IState): ITheme & IAuth => {\n  const { locale } = theme as ITheme;\n  const { token } = auth as IAuth;\n  return { locale, token };\n};\n\nconst mapDispatchToProps = {\n  signOut,\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Views));\n","import * as React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Views from \"./views/index\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { SUBDIR_PATH } from \"./configs/AppConfig\";\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <Provider store={store}>\n                <Router basename={SUBDIR_PATH}>\n                    <Switch>\n                        <Route path=\"/\" component={Views} />\n                    </Switch>\n                </Router>\n            </Provider>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { unregister } from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n","export const TOGGLE_COLLAPSED_NAV = 'TOGGLE_COLLAPSED_NAV';\nexport const CHANGE_LOCALE = 'CHANGE_LOCALE';\nexport const SIDE_NAV_STYLE_CHANGE = 'SIDE_NAV_STYLE_CHANGE';\nexport const NAV_TYPE_CHANGE = 'NAV_TYPE_CHANGE';\nexport const TOP_NAV_COLOR_CHANGE = 'TOP_NAV_COLOR_CHANGE';\nexport const HEADER_NAV_COLOR_CHANGE = 'HEADER_NAV_COLOR_CHANGE';\nexport const TOGGLE_MOBILE_NAV = 'TOGGLE_MOBILE_NAV'","export const SIGNIN = \"SIGNIN\";\nexport const SET_TOKEN = \"SET_TOKEN\";\nexport const AUTHENTICATED = \"AUTHENTICATED\";\nexport const SIGNOUT = \"SIGNOUT\";\nexport const SIGNOUT_SUCCESS = \"SIGNOUT_SUCCESS\";\nexport const SIGNUP = \"SIGNUP\";\nexport const SIGNUP_SUCCESS = \"SIGNUP_SUCCESS\";\nexport const SHOW_AUTH_MESSAGE = \"SHOW_AUTH_MESSAGE\";\nexport const HIDE_AUTH_MESSAGE = \"HIDE_AUTH_MESSAGE\";\nexport const SHOW_LOADING = \"SHOW_LOADING\";\nexport const HIDE_LOADING = \"HIDE_LOADING\";\nexport const AUTH_TOKEN = \"auth_token\";\nexport const SIGNIN_WITH_GOOGLE = \"SIGNIN_WITH_GOOGLE\";\nexport const SIGNIN_WITH_GOOGLE_AUTHENTICATED =\n    \"SIGNIN_WITH_GOOGLE_AUTHENTICATED\";\nexport const SIGNIN_WITH_FACEBOOK = \"SIGNIN_WITH_FACEBOOK\";\nexport const SIGNIN_WITH_FACEBOOK_AUTHENTICATED =\n    \"SIGNIN_WITH_FACEBOOK_AUTHENTICATED\";\nexport const SHOW_VALIDATE_MODAL = \"SHOW_VALIDATE_MODAL\";\nexport const VALIDATE_USER = \"VALIDATE_USER\";\nexport const IS_USER_ACTIVATED = \"IS_USER_ACTIVATED\";\n","import {\n    TOGGLE_COLLAPSED_NAV,\n    SIDE_NAV_STYLE_CHANGE,\n    CHANGE_LOCALE,\n    NAV_TYPE_CHANGE,\n    TOP_NAV_COLOR_CHANGE,\n    HEADER_NAV_COLOR_CHANGE,\n    TOGGLE_MOBILE_NAV,\n} from \"../constants/Theme\";\n\nexport function toggleCollapsedNav(navCollapsed: { [key: string]: boolean }) {\n    return {\n        type: TOGGLE_COLLAPSED_NAV,\n        navCollapsed,\n    };\n}\n\nexport function onNavStyleChange(sideNavTheme: any) {\n    return {\n        type: SIDE_NAV_STYLE_CHANGE,\n        sideNavTheme,\n    };\n}\n\nexport function onLocaleChange(locale: any) {\n    return {\n        type: CHANGE_LOCALE,\n        locale,\n    };\n}\n\nexport function onNavTypeChange(navType: any) {\n    return {\n        type: NAV_TYPE_CHANGE,\n        navType,\n    };\n}\n\nexport function onTopNavColorChange(topNavColor: any) {\n    return {\n        type: TOP_NAV_COLOR_CHANGE,\n        topNavColor,\n    };\n}\n\nexport function onHeaderNavColorChange(headerNavColor: any) {\n    return {\n        type: HEADER_NAV_COLOR_CHANGE,\n        headerNavColor,\n    };\n}\n\nexport function onMobileNavToggle(mobileNav: any) {\n    return {\n        type: TOGGLE_MOBILE_NAV,\n        mobileNav,\n    };\n}\n","import { message } from \"antd\";\n// @ts-ignore\nimport { JSEncrypt } from \"jsencrypt\";\nimport moment from \"moment\";\n\nclass Utils {\n  /**\n   * Get first character from first & last sentences of a username\n   * @param {String} name - Username\n   * @return {String} 2 characters string\n   */\n  static getNameInitial(name: string) {\n    let initials = name.match(/\\b\\w/g) || [];\n    return ((initials.shift() || \"\") + (initials.pop() || \"\")).toUpperCase();\n  }\n\n  /**\n   * Get current path related object from Navigation Tree\n   * @param {Array} navTree - Navigation Tree from directory 'configs/NavigationConfig'\n   * @param {String} path - Location path you looking for e.g '/app/dashboards/analytic'\n   * @return {Object} object that contained the path string\n   */\n  static getRouteInfo(navTree: any, path: any): any {\n    if (navTree.path === path) {\n      return navTree;\n    }\n    let route;\n    for (let p in navTree) {\n      if (navTree.hasOwnProperty(p) && typeof navTree[p] === \"object\") {\n        route = this.getRouteInfo(navTree[p], path);\n        if (route) {\n          return route;\n        }\n      }\n    }\n    return route;\n  }\n\n  /**\n   * Get accessible color contrast\n   * @param {String} hex - Hex color code e.g '#3e82f7'\n   * @return {String} 'dark' or 'light'\n   */\n  static getColorContrast(hex: any) {\n    const threshold = 130;\n    const hRed = hexToR(hex);\n    const hGreen = hexToG(hex);\n    const hBlue = hexToB(hex);\n    function hexToR(h: any) {\n      return parseInt(cutHex(h).substring(0, 2), 16);\n    }\n    function hexToG(h: any) {\n      return parseInt(cutHex(h).substring(2, 4), 16);\n    }\n    function hexToB(h: any) {\n      return parseInt(cutHex(h).substring(4, 6), 16);\n    }\n    function cutHex(h: any) {\n      return h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    }\n    const cBrightness = (hRed * 299 + hGreen * 587 + hBlue * 114) / 1000;\n    if (cBrightness > threshold) {\n      return \"dark\";\n    } else {\n      return \"light\";\n    }\n  }\n\n  /**\n   * Darken or lighten a hex color\n   * @param {String} color - Hex color code e.g '#3e82f7'\n   * @param {Number} percent - Percentage -100 to 100, positive for lighten, negative for darken\n   * @return {String} Darken or lighten color\n   */\n  static shadeColor(color: any, percent: any) {\n    let R = parseInt(color.substring(1, 3), 16);\n    let G = parseInt(color.substring(3, 5), 16);\n    let B = parseInt(color.substring(5, 7), 16);\n    R = parseInt(String((R * (100 + percent)) / 100));\n    G = parseInt(String((G * (100 + percent)) / 100));\n    B = parseInt(String((B * (100 + percent)) / 100));\n    R = R < 255 ? R : 255;\n    G = G < 255 ? G : 255;\n    B = B < 255 ? B : 255;\n    const RR =\n      R.toString(16).length === 1 ? `0${R.toString(16)}` : R.toString(16);\n    const GG =\n      G.toString(16).length === 1 ? `0${G.toString(16)}` : G.toString(16);\n    const BB =\n      B.toString(16).length === 1 ? `0${B.toString(16)}` : B.toString(16);\n    return `#${RR}${GG}${BB}`;\n  }\n\n  /**\n   * Returns either a positive or negative\n   * @param {Number} number - number value\n   * @param {any} positive - value that return when positive\n   * @param {any} negative - value that return when negative\n   * @return {any} positive or negative value based on param\n   */\n  static getSignNum(number: number, positive: any, negative: any) {\n    if (number > 0) {\n      return positive;\n    }\n    if (number < 0) {\n      return negative;\n    }\n    return null;\n  }\n\n  /**\n   * Returns either ascending or descending value\n   * @param {Object} a - antd Table sorter param a\n   * @param {Object} b - antd Table sorter param b\n   * @param {String} key - object key for compare\n   * @return {any} a value minus b value\n   */\n  static antdTableSorter(a: any, b: any, key: any) {\n    if (typeof a[key] === \"number\" && typeof b[key] === \"number\") {\n      return a[key] - b[key];\n    }\n\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\n      a = a[key].toLowerCase();\n      b = b[key].toLowerCase();\n      return a > b ? -1 : b > a ? 1 : 0;\n    }\n    return;\n  }\n\n  /**\n   * Filter array of object\n   * @param {Array} list - array of objects that need to filter\n   * @param {String} key - object key target\n   * @param {any} value  - value that excluded from filter\n   * @return {Array} a value minus b value\n   */\n  static filterArray(list: any, key: any, value: any) {\n    let data = list;\n    if (list) {\n      data = list.filter((item: any) => item[key] === value);\n    }\n    return data;\n  }\n\n  /**\n   * Remove object from array by value\n   * @param {Array} list - array of objects\n   * @param {String} key - object key target\n   * @param {any} value  - target value\n   * @return {Array} Array that removed target object\n   */\n  static deleteArrayRow(list: any, key: any, value: any) {\n    let data = list;\n    if (list) {\n      data = list.filter((item: any) => item[key] !== value);\n    }\n    return data;\n  }\n\n  /**\n   * Wild card search on all property of the object\n   * @param {Number | String} input - any value to search\n   * @param {Array} list - array for search\n   * @return {Array} array of object contained keyword\n   */\n  static wildCardSearch(list: any, input: any) {\n    const searchText = (item: any) => {\n      for (let key in item) {\n        if (item[key] == null) {\n          continue;\n        }\n        if (\n          item[key]\n            .toString()\n            .toUpperCase()\n            .indexOf(input.toString().toUpperCase()) !== -1\n        ) {\n          return true;\n        }\n      }\n    };\n    list = list.filter((value: any) => searchText(value));\n    return list;\n  }\n\n  /**\n   * Get Breakpoint\n   * @param {Object} screens - Grid.useBreakpoint() from antd\n   * @return {Array} array of breakpoint size\n   */\n  static getBreakPoint(screens: any) {\n    let breakpoints: any[] = [];\n    for (const key in screens) {\n      if (screens.hasOwnProperty(key)) {\n        const element = screens[key];\n        if (element) {\n          breakpoints.push(key);\n        }\n      }\n    }\n    return breakpoints;\n  }\n\n  static encryptInput(input: string, publicKey: string) {\n    const jsEncrypt = new JSEncrypt({});\n    jsEncrypt.setPublicKey(publicKey);\n    return jsEncrypt.encrypt(input);\n  }\n\n  /**\n   * Add an item to a localStorage() object\n   * @param {String} img  The img that was uploaded\n   * @param {Function} callback Callback function to render img\n   */\n  static getBase64(img: any, callback: any) {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  static beforeUploadArticle(file: any): any {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function (event) {\n        const image: any = document.createElement(\"img\");\n        image.src = event!.target!.result;\n        image.onload = function () {\n          const isSquare = image.width === image.height;\n          const isJpgOrPng =\n            file.type === \"image/jpeg\" || file.type === \"image/png\";\n          if (!isSquare) {\n            message.error(\"Image must be 1:1 format!\");\n          }\n\n          if (!isJpgOrPng) {\n            message.error(\"You can only upload JPG/PNG file!\");\n          }\n          if (isSquare && isJpgOrPng) {\n            resolve();\n          } else {\n            reject();\n          }\n        };\n      };\n    });\n  }\n\n  static beforeUpload(file: any) {\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n    }\n    const isLt2M = file.size / 1024 / 1024 < 0.3;\n\n    if (!isLt2M) {\n      message.error(\"Image must be smaller than 300kb!\");\n    }\n    return isJpgOrPng && isLt2M;\n  }\n\n  static dummyRequest({ file, onSuccess }: any) {\n    setTimeout(() => {\n      onSuccess(\"ok\");\n    });\n  }\n\n  /**\n   * Add an item to a localStorage() object\n   * @param {Array} array - the array of objects that has to be sorted\n   * @param {String | Number} key - any value to search\n   * @return {Array} - a new sorted array\n   */\n  static sortData(array: any, key: any) {\n    return array.slice().sort((a: any, b: any) => a[key] - b[key]);\n  }\n\n  static handleDotNetDate(date: any) {\n    return moment(date).format(\"[/Date(]xZZ[)/]\");\n  }\n\n  static toMilliSeconds(date: string) {\n    const newDate = new Date(date);\n    return newDate.getMilliseconds();\n  }\n\n  static parseToTicks(date: number): number {\n    return date * 10000 + 621355968000000000;\n  }\n}\n\nexport default Utils;\n","import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { IntlProvider } from \"react-intl\";\nimport IntlMessage from \"../components/util-components/IntlMessage\";\nimport AppLocale from \"../lang\";\nimport store from \"../redux/store\";\n\nconst TranslateText = (message: string) => {\n  const locale = store.getState().theme.locale;\n  const currentAppLocale = AppLocale[locale];\n  return ReactDOMServer.renderToString(\n    <IntlProvider\n      locale={currentAppLocale.locale}\n      messages={currentAppLocale.messages}\n    >\n      <IntlMessage id={message} />\n    </IntlProvider>\n  );\n};\n\nexport default TranslateText;\n","import React, { Component } from \"react\";\n\ntype IconProps = {\n\ttype?: any;\n\tclassName?: string;\n}\n\nexport class Icon extends Component<IconProps> {\n  render() {\n    const { type, className } = this.props;\n    return <>{React.createElement(type, { className: className })}</>;\n  }\n}\n\nexport default Icon;\n","import axios, {\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n  CancelTokenSource,\n} from \"axios\";\nimport { message } from \"antd\";\nimport { API_APP_URL, API_AUTH_URL, API_SMS_URL } from \"../configs/AppConfig\";\nimport { EXPIRE_TIME } from \"../constants/Messages\";\nimport { authenticated, hideLoading, signOut } from \"../redux/actions/Auth\";\nimport store from \"../redux/store\";\nimport TranslateText from \"../utils/translate\";\nimport {\n  IActivateUserRequest,\n  IAuthorizeUserRequest,\n  IChangePasswordRequest,\n  IRegisterCompanyRequest,\n  IRegisterUserRequest,\n  ISMSReviewerUpdateRequest,\n  ISMSSendSMSRequest,\n  IUpdateAppRequest,\n  IUpdateCompanyRequest,\n} from \"./types.request\";\nimport {\n  ApiResponse,\n  IAuthorizeUserResponse,\n  ICampaignList,\n  IGenerateApiKeyResponse,\n  IGenerateLicenseActivationCodeResponse,\n  IGenerateRsaKeyResponse,\n  IGetAllUsersInfoResponse,\n  IGetAppLicensesList,\n  IGetCompanyInfoResponse,\n  IGetManagedTokenResponse,\n  IGetMarketAppListResponse,\n  IGetNewsResponse,\n  IGetProfileInfoResponse,\n  INewsList,\n  IRefreshTokenResponse,\n  IRegisterUserResponse,\n  IResetPasswordResponse,\n  ISendActivationCodeResponse,\n  ISMSGetCampaignResponse,\n  ISMSInfoGetByPeriodResponse,\n  ISMSInfoGetDetailByPeriodResponse,\n  ISMSInfoResponse,\n  IUsers,\n} from \"./types.response\";\nconst publicIp = require(\"react-public-ip\");\n\ndeclare module \"axios\" {\n  interface AxiosResponse<T> extends Promise<T> {}\n}\nexport default class HttpClient {\n  public readonly instance: AxiosInstance;\n  private _token: string;\n  public _source: CancelTokenSource;\n\n  public constructor(baseURL = \"\") {\n    this.instance = axios.create({\n      baseURL,\n    });\n    this._source = axios.CancelToken.source();\n    this._token = store.getState().auth.token;\n    this._initializeResponseInterceptor();\n    this._initializeRequestInterceptor();\n  }\n  private _RefreshToken = async () =>\n    this.instance.get<IRefreshTokenResponse>(`${API_AUTH_URL}/RefreshToken`);\n\n  private _initializeResponseInterceptor = () => {\n    this.instance.interceptors.response.use(\n      this._handleResponse,\n      this._handleError\n    );\n  };\n  private _initializeRequestInterceptor = () => {\n    this.instance.interceptors.request.use(this._handleRequest, (error) =>\n      Promise.reject(error)\n    );\n  };\n  private _handleRequest = (config: AxiosRequestConfig) => {\n    console.log(config);\n    if (config.method === \"get\" && config.baseURL !== API_SMS_URL) {\n      config.params = {\n        ...config.params,\n        Token: this._token,\n      };\n    }\n    if (config.method === \"post\" && config.baseURL !== API_SMS_URL) {\n      config.data = {\n        ...config.data,\n        Token: this._token,\n      };\n    }\n    config.cancelToken = this._source.token;\n    return {\n      ...config,\n    };\n  };\n\n  private _handleResponse = (response: AxiosResponse) => {\n    console.log(response);\n    if (response.data.ErrorCode === 118) {\n      return this._RefreshToken().then(async (data) => {\n        if (data && data.ErrorCode === 0) {\n          const { Token } = data;\n          store.dispatch(authenticated(Token));\n          if (response.config.method === \"get\") {\n            response.config.params = {\n              ...response.config.params,\n              Token,\n            };\n            return await axios\n              .request(response.config)\n              .then((response) => response.data);\n          }\n          if (response.config.method === \"post\") {\n            response.config.data = {\n              ...JSON.parse(response.config.data),\n              Token,\n            };\n            return await axios\n              .request(response.config)\n              .then((response) => response.data);\n          }\n        } else {\n          const key = \"updatable\";\n          message\n            .loading({\n              content: TranslateText(EXPIRE_TIME),\n              key,\n              duration: 1.5,\n            })\n            .then(() => {\n              store.dispatch(signOut());\n            });\n        }\n      });\n    } else if (\n      response.data.ErrorCode !== 0 &&\n      response.data.ErrorCode !== 108 &&\n      response.data.ErrorCode !== -1 &&\n      response.data.ErrorCode !== 102\n    ) {\n      message.error({\n        content: response.data.ErrorMessage,\n        key: \"updatable\",\n        duration: 2.5,\n      });\n    }\n    return response.data;\n  };\n  private _handleError = async (error: AxiosResponse) => {\n    if (error && error.request && error.request.status !== 200) {\n      message.error({\n        content: error.toString(),\n        key: \"updatable\",\n        duration: 10,\n      });\n    }\n    store.dispatch(hideLoading());\n  };\n}\n\n// Auth Api\nexport class AuthService extends HttpClient {\n  public constructor() {\n    super(`${API_AUTH_URL}`);\n  }\n\n  public Login = async (data: IAuthorizeUserRequest) =>\n    this.instance.post<IAuthorizeUserResponse>(\"/AuthorizeUser\", {\n      ...data,\n      info: (await publicIp.v4()) || (\"\" as string),\n    });\n\n  public RegisterCompany = async (data: IRegisterCompanyRequest) =>\n    this.instance.post<IAuthorizeUserResponse>(\"/RegisterCompany\", data);\n\n  public SendActivationCode = async () =>\n    this.instance.get<ISendActivationCodeResponse>(\"/SendActivationCode\");\n\n  public ResetPassword = async (Email: string) =>\n    this.instance.post<IResetPasswordResponse>(\"/ResetPassword\", {\n      Email,\n      info: (await publicIp.v4()) || (\"\" as string),\n    });\n\n  public RegisterUser = async (data: IRegisterUserRequest) =>\n    this.instance.post<IRegisterUserResponse>(\"/RegisterUser\", data);\n\n  public GetManagedToken = async (CompanyID: number) =>\n    this.instance.get<IGetManagedTokenResponse>(\"/GetManagedToken\", {\n      params: { CompanyID },\n    });\n\n  public ChangePassword = async (data: IChangePasswordRequest) =>\n    this.instance.post<ApiResponse>(\"/ChangePassword\", data);\n\n  public ActivateUser = async (params: IActivateUserRequest) =>\n    this.instance.get<ApiResponse>(\"/ActivateUser\", {\n      params,\n    });\n}\n\n// Client Api\nexport class AppService extends HttpClient {\n  public constructor() {\n    super(`${API_APP_URL}`);\n  }\n  public GetProfileInfo = async () =>\n    this.instance.get<IGetProfileInfoResponse>(\"/GetProfileInfo\");\n  public UpdateUser = async (data: IUsers) =>\n    this.instance.post<ApiResponse>(\"/UpdateUser\", data);\n\n  public GetMarketAppList = async () =>\n    this.instance.get<IGetMarketAppListResponse>(\"/GetMarketAppList\");\n\n  public DeactivateApp = async (AppID: number) =>\n    this.instance.post<ApiResponse>(\"/DeactivateApp\", {\n      AppID,\n    });\n\n  public ActivateApp = async (AppID: number) =>\n    this.instance.post<ApiResponse>(\"/ActivateApp\", {\n      AppID,\n    });\n\n  public GetAppLicenses = async (AppType: number) =>\n    this.instance.get<IGetAppLicensesList>(\"/GetAppLicensesList\", {\n      params: {\n        AppType,\n      },\n    });\n\n  public RequestLicense = async (AppType: number, Quantity: number) =>\n    this.instance.get<ApiResponse>(\"/RequestAppLicense\", {\n      params: { AppType, Quantity },\n    });\n\n  public ReleaseLicense = async (LicenseID: string) =>\n    this.instance.get<ApiResponse>(\"/ReleaseAppLicense\", {\n      params: { LicenseID },\n    });\n\n  public DeleteLicense = async (LicenseID: string) =>\n    this.instance.get<ApiResponse>(\"/DeleteAppLicense\", {\n      params: { LicenseID },\n    });\n\n  public GenerateApiKey = async (AppID: number) =>\n    this.instance.post<IGenerateApiKeyResponse>(\"/GenerateApiKey\", {\n      AppID,\n    });\n\n  public GenerateRsaKey = async (AppID: number) =>\n    this.instance.post<IGenerateRsaKeyResponse>(\"/GenerateRsaKey\", {\n      AppID,\n    });\n  public UpdateRsaKey = async (AppID: number, Key: string, KeyType: number) =>\n    this.instance.post(\"/UpdateRsaKey\", {\n      AppID,\n      Key,\n      KeyType,\n    });\n\n  public DeleteApiKey = async (AppID: number) =>\n    this.instance.post(\"/DeleteApiKey\", {\n      AppID,\n    });\n\n  public GenerateLicenseActivationCode = async (AppID: number) =>\n    this.instance.post<IGenerateLicenseActivationCodeResponse>(\n      \"/GenerateLicenseActivationCode\",\n      {\n        AppID,\n      }\n    );\n\n  public GetUserList = async () =>\n    this.instance.get<IGetAllUsersInfoResponse>(\"/GetUsersInfo\");\n\n  public GetCompanyInfo = async () =>\n    this.instance.get<IGetCompanyInfoResponse>(\"/GetCompanyInfo\");\n\n  public UpdateCompany = async (data: IUpdateCompanyRequest) =>\n    this.instance.post<ApiResponse>(\"/UpdateCompany\", {\n      ...data,\n      info: await publicIp.v4(),\n    });\n\n  public ChangeUserStatus = async (ID: number, Status: number) =>\n    this.instance.get<ApiResponse>(\"/ChangeUserStatus\", {\n      params: {\n        ID,\n        Status,\n      },\n    });\n\n  public GetAppNews = async (AppType: number) =>\n    this.instance.get<IGetNewsResponse>(\"/GetAppNews\", {\n      params: {\n        AppType,\n      },\n    });\n\n  public UpdateNews = async (NewsData: INewsList) =>\n    this.instance.post<ApiResponse>(\"/UpdateAppNews\", {\n      NewsData,\n    });\n\n  public UpdateApp = async (AppData: IUpdateAppRequest) =>\n    this.instance.post<ApiResponse>(\"/UpdateApp\", {\n      ...AppData,\n    });\n\n  public GetPortalNews = async (ProductType: number) =>\n    this.instance.get<IGetNewsResponse>(\"/GetPortalNews\", {\n      params: {\n        ProductType,\n      },\n    });\n\n  public SMS_GetCampaign = async () =>\n    this.instance.get<ISMSGetCampaignResponse>(\"/SMS/SMSGetCampaign\");\n\n  public SMS_DeleteCampaign = async (ID: number) =>\n    this.instance.get<ApiResponse>(\"/SMS/DeleteCampaign\", {\n      params: {\n        ID,\n      },\n    });\n\n  public SMS_ReviewerUpdate = async (reviewerInfo: ISMSReviewerUpdateRequest) =>\n    this.instance.post<ApiResponse>(\"/SMS/ReviewerUpdate\", {\n      ...reviewerInfo,\n    });\n\n  public SMS_UpdateCampaign = async (campaignInfo: ICampaignList) =>\n    this.instance.post<ApiResponse>(\"/SMS/UpdateCampaign\", {\n      ...campaignInfo,\n    });\n}\n\n// SMS Api\nexport class SmsService extends HttpClient {\n  public constructor() {\n    super(`${API_SMS_URL}`);\n  }\n\n  public CheckApiKey = async (APIKey: number) =>\n    this.instance.get<ApiResponse>(\"/CheckApiKey\", {\n      params: {\n        APIKey,\n      },\n    });\n\n  public GetInfo = async () => this.instance.get<ISMSInfoResponse>(\"/GetInfo\");\n\n  public Info_GetByPeriod = async (\n    APIKey: string,\n    DateTicksStart: number,\n    DateTicksEnd: number\n  ) =>\n    this.instance.get<ISMSInfoGetByPeriodResponse>(\"/Info/GetByPeriod\", {\n      params: {\n        APIKey,\n        DateTicksStart,\n        DateTicksEnd,\n      },\n    });\n\n  public Info_GetDetailByPeriod = async (\n    APIKey: string,\n    DateStart: string,\n    DateEnd: string\n  ) =>\n    this.instance.get<ISMSInfoGetDetailByPeriodResponse>(\n      \"/Info/GetDetailByPeriod\",\n      {\n        params: {\n          APIKey,\n          DateStart,\n          DateEnd,\n        },\n      }\n    );\n\n  public Info_GetTotal = async (APIKey: string) =>\n    this.instance.get<ISMSInfoResponse>(\"info/GetTotal\", {\n      params: {\n        APIKey,\n      },\n    });\n\n  public SendSMS = async (data: ISMSSendSMSRequest) =>\n    this.instance.post<ApiResponse>(\"/SendSMS\", {\n      ...data,\n    });\n\n  public SendSMSByPhoneList = async (data: ISMSSendSMSRequest) =>\n    this.instance.post<ApiResponse>(\"/SendSMSByPhoneList\", {\n      ...data,\n    });\n}\n","import {\n    AUTHENTICATED,\n    SHOW_AUTH_MESSAGE,\n    HIDE_AUTH_MESSAGE,\n    SIGNOUT_SUCCESS,\n    SIGNUP_SUCCESS,\n    SHOW_LOADING,\n    SIGNOUT,\n    SIGNUP,\n    SIGNIN_WITH_GOOGLE_AUTHENTICATED,\n    SIGNIN_WITH_FACEBOOK_AUTHENTICATED,\n    HIDE_LOADING,\n    VALIDATE_USER,\n    IS_USER_ACTIVATED,\n    SET_TOKEN,\n} from \"../constants/Auth\";\n\nexport interface IAuth {\n    loading?: boolean;\n    message?: string;\n    showMessage?: boolean;\n    redirect?: string;\n    token?: string;\n    isAuth?: boolean;\n    userActivated?: boolean;\n}\nconst initState = {\n    loading: false,\n    message: \"\",\n    showMessage: false,\n    redirect: \"\",\n    token: \"\",\n    isAuth: false,\n    userActivated: false,\n};\nconst auth = (state = initState, action: any) => {\n    switch (action.type) {\n        case AUTHENTICATED:\n            return {\n                ...state,\n                loading: false,\n                redirect: \"/\",\n                token: action.token,\n                isAuth: true,\n            };\n\n        case SHOW_AUTH_MESSAGE:\n            return {\n                ...state,\n                message: action.message,\n                showMessage: true,\n                loading: false,\n            };\n        case HIDE_AUTH_MESSAGE:\n            return {\n                ...state,\n                message: \"\",\n                showMessage: false,\n            };\n        case SIGNOUT:\n            return {\n                ...state,\n                token: null,\n                redirect: \"/auth/login\",\n                loading: false,\n                isAuth: false,\n            };\n\n        case SIGNOUT_SUCCESS: {\n            return {\n                ...state,\n                token: null,\n                redirect: \"/auth/login\",\n                loading: false,\n            };\n        }\n        case SIGNUP_SUCCESS: {\n            return {\n                ...state,\n                loading: false,\n                token: action.token,\n            };\n        }\n        case SHOW_LOADING: {\n            return {\n                ...state,\n                loading: true,\n            };\n        }\n        case HIDE_LOADING:\n            return {\n                ...state,\n                loading: false,\n            };\n        case SIGNIN_WITH_GOOGLE_AUTHENTICATED: {\n            return {\n                ...state,\n                loading: false,\n                token: action.token,\n            };\n        }\n        case SIGNIN_WITH_FACEBOOK_AUTHENTICATED: {\n            return {\n                ...state,\n                loading: false,\n                token: action.token,\n            };\n        }\n        case IS_USER_ACTIVATED:\n            return {\n                ...state,\n                userActivated: action.userActivated,\n                activationToken: action.activationToken,\n            };\n        case SET_TOKEN:\n            return {\n                ...state,\n                token: action.token,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default auth;\n","import {\n  TOGGLE_COLLAPSED_NAV,\n  CHANGE_LOCALE,\n  SIDE_NAV_STYLE_CHANGE,\n  NAV_TYPE_CHANGE,\n  TOP_NAV_COLOR_CHANGE,\n  HEADER_NAV_COLOR_CHANGE,\n  TOGGLE_MOBILE_NAV,\n} from \"../constants/Theme\";\nimport { THEME_CONFIG } from \"../../configs/AppConfig\";\nexport interface ITheme {\n  navCollapsed?: boolean;\n  sideNavTheme?: string;\n  locale?: \"en\" | \"ru\" | \"ro\";\n  navType?: string;\n  topNavColor?: string;\n  headerNavColor?: string;\n  mobileNav?: boolean;\n}\nconst initTheme = { ...THEME_CONFIG } as ITheme;\n\nconst theme = (state = initTheme, action: any) => {\n  switch (action.type) {\n    case TOGGLE_COLLAPSED_NAV:\n      return {\n        ...state,\n        navCollapsed: action.navCollapsed,\n      };\n    case SIDE_NAV_STYLE_CHANGE:\n      return {\n        ...state,\n        sideNavTheme: action.sideNavTheme,\n      };\n    case CHANGE_LOCALE:\n      return {\n        ...state,\n        locale: action.locale,\n      };\n    case NAV_TYPE_CHANGE:\n      return {\n        ...state,\n        navType: action.navType,\n      };\n    case TOP_NAV_COLOR_CHANGE:\n      return {\n        ...state,\n        topNavColor: action.topNavColor,\n      };\n    case HEADER_NAV_COLOR_CHANGE:\n      return {\n        ...state,\n        headerNavColor: action.headerNavColor,\n      };\n    case TOGGLE_MOBILE_NAV:\n      return {\n        ...state,\n        mobileNav: action.mobileNav,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default theme;\n","import { CLEAR_INFO, UPDATE_SETTINGS } from \"../constants/Account\";\nimport { REMOVE_AVATAR } from \"../constants/Account\";\n\nexport interface IAccount {\n    CompanyID: number;\n    Email?: string;\n    FirstName?: string;\n    ID?: number;\n    LastName?: string;\n    Password?: string;\n    PhoneNumber?: string;\n    Photo?: string;\n    UiLanguage?: number;\n}\nconst initialState = {\n    CompanyID: null,\n    Email: \"\",\n    FirstName: null,\n    ID: null,\n    LastName: null,\n    Password: null,\n    PhoneNumber: null,\n    Photo: null,\n    UiLanguage: 0,\n};\nconst account = (state = initialState, action: any) => {\n    switch (action.type) {\n        case UPDATE_SETTINGS:\n            return {\n                ...state,\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default account;\n","import { combineReducers } from \"redux\";\nimport Auth, { IAuth } from \"./Auth\";\nimport Theme, { ITheme } from \"./Theme\";\nimport Account, { IAccount } from \"./Account\";\nexport interface IState {\n    theme?: ITheme;\n    account?: IAccount;\n    auth?: IAuth;\n}\n\nconst reducers = combineReducers({\n    theme: Theme,\n    auth: Auth,\n    account: Account,\n});\n\nexport default reducers;\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport reducers from \"../reducers\";\nimport { loadState, saveState } from \"../../utils/localStorage\";\nimport throttle from \"lodash/throttle\";\nimport thunk from \"redux-thunk\";\n\ninterface IState {\n    [key: string]: any;\n}\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nfunction configureStore(preLoadedState: IState) {\n    // const composeEnhancers =\n    //   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    return createStore(\n        reducers,\n        preLoadedState,\n        compose(applyMiddleware(thunk))\n    );\n}\n\nconst store = configureStore(loadState());\n\nstore.subscribe(throttle(() => saveState(store.getState()), 1000));\n\nexport default store;\n","import { SUBDIR_PATH } from \"../configs/AppConfig\";\nimport { IState } from \"../redux/reducers\";\n\n// Pass in Redux store's state to save it to the user's browser local storage\nexport const saveState = (state: IState) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(`${SUBDIR_PATH}`, serializedState);\n  } catch {\n    // We'll just ignore the errors\n  }\n};\n/* Loads the state and returns an object that can be provided as the\n *  preloadedState parameter of store.js's call to configureStore */\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(`${SUBDIR_PATH}`);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch {\n    return undefined;\n  }\n};\n","const dev = {\n  API_APP_URL: \"https://dev.edi.md/ISClientWebAppService/json\",\n  API_AUTH_URL: \"https://dev.edi.md/ISAuthService/json\",\n  API_SMS_URL: \"https://dev.edi.md/SMSService/json\",\n  SUBDIR_PATH: \"/clientportal\",\n};\n\nconst test = {\n  API_APP_URL: \"https://api.edi.md/ISClientWebAppService/json\",\n  API_AUTH_URL: \"https://api.edi.md/ISAuthService/json\",\n  API_SMS_URL: \"https://api.edi.md/SMSService/json\",\n  SUBDIR_PATH: \"/clientportal\",\n};\n\nconst prod = {\n  API_APP_URL: \"https://dev.edi.md/ISClientWebAppService/json\",\n  API_AUTH_URL: \"https://dev.edi.md/ISAuthService/json\",\n  API_SMS_URL: \"https://dev.edi.md/SMSService/json\",\n  SUBDIR_PATH: \"/testclientportal\",\n};\n\nconst getEnv = () => {\n  switch (process.env.NODE_ENV) {\n    case \"development\":\n      return dev;\n    case \"production\":\n      return prod;\n    case \"test\":\n      return test;\n    default:\n      break;\n  }\n};\n\nexport const env = getEnv();\n","import {\n  SIDE_NAV_LIGHT,\n  NAV_TYPE_SIDE,\n  NAV_TYPE_TOP,\n  SIDE_NAV_DARK,\n} from \"../constants/ThemeConstant\";\nimport { env } from \"./EnvironmentConfig\";\n\nexport const APP_NAME = \"Client Portal App\";\nexport const API_APP_URL = env!.API_APP_URL;\nexport const API_AUTH_URL = env!.API_AUTH_URL;\nexport const API_SMS_URL = env!.API_SMS_URL;\nexport const SUBDIR_PATH = env!.SUBDIR_PATH;\nexport const APP_PREFIX_PATH = \"/app\";\nexport const AUTH_PREFIX_PATH = \"/auth\";\n\nexport const THEME_CONFIG = {\n  navCollapsed: false,\n  sideNavTheme: SIDE_NAV_LIGHT,\n  locale: \"en\",\n  navType: NAV_TYPE_SIDE,\n  topNavColor: \"#fff\",\n  headerNavColor: \"#193550\",\n  mobileNav: false,\n};\n","import {\n  AUTHENTICATED,\n  SIGNOUT,\n  SHOW_AUTH_MESSAGE,\n  HIDE_AUTH_MESSAGE,\n  SHOW_LOADING,\n  HIDE_LOADING,\n} from \"../constants/Auth\";\nimport { message, Modal } from \"antd\";\nimport { getProfileInfo } from \"./Account\";\nimport { ACTIVATE_ACCOUNT, EMAIL_CONFIRM_MSG } from \"../../constants/Messages\";\nimport { AuthService } from \"../../api\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { IState } from \"../reducers\";\nimport TranslateText from \"../../utils/translate\";\nimport axios from \"axios\";\nimport { API_AUTH_URL, SUBDIR_PATH } from \"../../configs/AppConfig\";\nimport { IAuthorizeUserRequest } from \"../../api/types.request\";\nimport { onHeaderNavColorChange } from \"./Theme\";\n\ntype ThunkResult<R> = ThunkAction<R, IState, undefined, any>;\n\nexport const authenticated = (token: string) => ({\n  type: AUTHENTICATED,\n  token,\n});\n\nexport const signOut = () => ({\n  type: SIGNOUT,\n});\n\nexport const showAuthMessage = (message: string) => ({\n  type: SHOW_AUTH_MESSAGE,\n  message,\n});\n\nexport const hideAuthMessage = () => ({\n  type: HIDE_AUTH_MESSAGE,\n});\n\nexport const showLoading = () => ({\n  type: SHOW_LOADING,\n});\nexport const hideLoading = () => ({\n  type: HIDE_LOADING,\n});\n\nexport const sendActivationCode = (): ThunkResult<void> => async (dispatch) => {\n  return new AuthService().SendActivationCode().then((data) => {\n    if (data && data.ErrorCode === 0)\n      message.success({\n        content: TranslateText(EMAIL_CONFIRM_MSG),\n        key: \"updatable\",\n        duration: 2,\n      });\n    else dispatch(showAuthMessage(data.ErrorMessage ?? \"\"));\n  });\n};\n\nconst handleAccountActivation = (Token: string) => {\n  Modal.confirm({\n    content: TranslateText(ACTIVATE_ACCOUNT),\n    onOk: async () => {\n      // I'm calling axios here and not the thunk,\n      // because I don't know how to pass the token inside the thunk\n      return await axios\n        .get(`${API_AUTH_URL}/SendActivationCode`, {\n          params: {\n            Token,\n          },\n        })\n        .then((response) => {\n          if (response.data.ErrorCode === 0) {\n            message.success({\n              content: TranslateText(EMAIL_CONFIRM_MSG),\n              key: \"updatable\",\n              duration: 2,\n            });\n          }\n        });\n    },\n  });\n};\n\nexport const authorizeUser = (\n  userData: IAuthorizeUserRequest\n): ThunkResult<void> => {\n  return async (dispatch) => {\n    return new AuthService()\n      .Login(userData)\n      .then((data) => {\n        if (data) {\n          const { ErrorCode, ErrorMessage, Token } = data;\n          if (ErrorCode === 0) {\n            dispatch(authenticated(Token));\n            dispatch(getProfileInfo());\n            if (SUBDIR_PATH === \"/testclientportal\") {\n              dispatch(onHeaderNavColorChange(\"#DE4436\"));\n            }\n          } else if (ErrorCode === 102) {\n            dispatch(showAuthMessage(ErrorMessage!.toString()));\n          } else if (ErrorCode === 108) {\n            handleAccountActivation(Token);\n          } else {\n            dispatch(hideLoading());\n            dispatch(showAuthMessage(ErrorMessage!.toString()));\n          }\n        }\n      })\n      .then(() => dispatch(hideLoading()));\n  };\n};\n","import antdEnUS from 'antd/es/locale/en_US';\nimport enMsg from \"../locales/en_US.json\";\n\nconst EnLang = {\n  antd: antdEnUS,\n  locale: 'en-US',\n  messages: {\n    ...enMsg\n  },\n};\nexport default EnLang;\n","import antdRoRO from 'antd/es/locale/ro_RO';\nimport roMsg from '../locales/ro_RO.json';\n\nconst RoLang = {\n  antd: antdRoRO,\n  locale: 'ro-RO',\n  messages: {\n    ...roMsg\n  },\n};\nexport default RoLang;\n","import enLang from \"./entries/en_US\";\nimport roLang from \"./entries/ro_RO\";\nimport ruLang from \"./entries/ru_RU\";\n\n// interface IAppLocale {\n//     [key: string]: string\n// }\nconst AppLocale = {\n    en: enLang,\n    ro: roLang,\n    ru: ruLang,\n} as { [key: string]: any };\n\nexport default AppLocale;\n","import antdRuRU from 'antd/es/locale/ru_RU';\nimport ruMsg from '../locales/ru_RU.json';\n\nconst RuLang = {\n  antd: antdRuRU,\n  locale: 'ru-RU',\n  messages: {\n    ...ruMsg\n  },\n};\nexport default RuLang;\n"],"sourceRoot":""}