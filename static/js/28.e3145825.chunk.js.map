{"version":3,"sources":["views/app-views/catalog/company/CompanyForm.tsx","views/app-views/catalog/company/index.tsx"],"names":["CompanyForm","state","formRef","React","createRef","instance","AppService","getCompanyInfo","a","GetCompanyInfo","then","data","ErrorCode","props","setLoading","setState","Company","setFieldsValue","updateCompany","values","updatedInfo","UpdateCompany","message","success","content","TranslateText","DONE","key","this","_source","cancel","onFinish","loading","UPDATING","setTimeout","onRemoveAvater","deletedImage","Logo","Loading","cover","Flex","alignItems","mobileFlex","className","size","src","icon","UserOutlined","customRequest","Utils","dummyRequest","onChange","info","file","status","getBase64","originFileObj","imageUrl","newImage","UPLOADING","showUploadList","beforeUpload","style","marginBottom","type","IntlMessage","id","onClick","ref","name","layout","initialValues","onFinishFailed","errorInfo","console","log","xs","sm","md","lg","gutter","ROW_GUTTER","Item","label","rules","required","pattern","mask","onChangeMask","htmlType","Component","mapDispatchToProps","updateSettings","connect","useState","setTextMask","e","target","value"],"mappings":"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","file":"static/js/28.e3145825.chunk.js","sourcesContent":["import React, { Component, Dispatch, SetStateAction } from \"react\";\nimport { Form, Avatar, Button, Input, Row, Col, message, Upload } from \"antd\";\nimport MaskedInput from \"antd-mask-input\";\nimport { UserOutlined } from \"@ant-design/icons\";\nimport { ROW_GUTTER } from \"../../../../constants/ThemeConstant\";\nimport Flex from \"../../../../components/shared-components/Flex\";\nimport IntlMessage from \"../../../../components/util-components/IntlMessage\";\nimport { updateSettings } from \"../../../../redux/actions/Account\";\nimport { connect } from \"react-redux\";\nimport { AppService } from \"../../../../api\";\nimport { DONE, UPDATING, UPLOADING } from \"../../../../constants/Messages\";\nimport Utils from \"../../../../utils\";\nimport { ICompanyData } from \"../../../../api/types.response\";\nimport { UploadChangeParam } from \"antd/lib/upload\";\nimport TranslateText from \"../../../../utils/translate\";\nimport { FormInstance } from \"antd/lib/form\";\nimport Loading from \"../../../../components/shared-components/Loading\";\nclass CompanyForm extends Component<{\n  onChangeMask: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  loading: boolean;\n  setLoading: Dispatch<SetStateAction<boolean>>;\n}> {\n  state = {} as ICompanyData;\n  private formRef = React.createRef() as React.RefObject<\n    FormInstance<ICompanyData>\n  >;\n  private instance = new AppService();\n\n  private getCompanyInfo = async () => {\n    return this.instance.GetCompanyInfo().then((data) => {\n      if (data && data.ErrorCode === 0) {\n        this.props.setLoading(false);\n        this.setState(data.Company);\n        if (this.formRef[\"current\"])\n          this.formRef[\"current\"].setFieldsValue(data.Company);\n      }\n    });\n  };\n\n  private updateCompany = async (values: ICompanyData) => {\n    const updatedInfo = { Company: { ...this.state, ...values } };\n    return this.instance.UpdateCompany(updatedInfo).then(async (data) => {\n      if (data && data.ErrorCode === 0) {\n        await this.getCompanyInfo();\n        message.success({\n          content: TranslateText(DONE),\n          key: \"updatable\",\n        });\n      }\n    });\n  };\n  componentDidMount() {\n    this.getCompanyInfo();\n  }\n\n  componentWillUnmount() {\n    this.instance._source.cancel();\n  }\n\n  render() {\n    const onFinish = async (values: ICompanyData) => {\n      message.loading({\n        content: TranslateText(UPDATING),\n        key: \"updatable\",\n      });\n      setTimeout(async () => {\n        this.updateCompany(values);\n      }, 1000);\n    };\n\n    const onFinishFailed = (errorInfo: any) => {\n      console.log(\"Failed:\", errorInfo);\n    };\n\n    const onUploadAavater = (info: UploadChangeParam) => {\n      if (info.file.status === \"uploading\") {\n        message.loading({\n          content: TranslateText(UPLOADING),\n          key: \"updatable\",\n        });\n        return;\n      }\n      if (info.file.status === \"done\") {\n        Utils.getBase64(info.file.originFileObj, async (imageUrl: string) => {\n          const newImage = { Logo: imageUrl };\n          this.updateCompany(newImage);\n        });\n      }\n    };\n\n    const onRemoveAvater = async () => {\n      const deletedImage = { Logo: \"\" };\n      this.updateCompany(deletedImage).then(() => this.setState(deletedImage));\n    };\n\n    if (this.props.loading) {\n      return <Loading cover=\"content\" />;\n    }\n\n    return (\n      <>\n        <Flex\n          alignItems=\"center\"\n          mobileFlex={false}\n          className=\"text-center text-md-left\"\n        >\n          <Avatar size={90} src={this.state.Logo} icon={<UserOutlined />} />\n          <div className=\"ml-md-3 mt-md-0 mt-3\">\n            <Upload\n              customRequest={Utils.dummyRequest}\n              onChange={onUploadAavater}\n              showUploadList={false}\n              beforeUpload={(info) => Utils.beforeUpload(info)}\n            >\n              <p style={{ marginBottom: \"15px\" }}>\n                * <i>JPEG, PNG. 150x150</i>\n              </p>\n              <Button type=\"primary\">\n                <IntlMessage id={\"account.EditProfile.ChangeAvatar\"} />\n              </Button>\n            </Upload>\n            <Button className=\"ml-2\" onClick={onRemoveAvater}>\n              <IntlMessage id={\"account.EditProfile.Remove\"} />\n            </Button>\n          </div>\n        </Flex>\n        <div className=\"mt-4\">\n          <Form\n            ref={this.formRef}\n            name=\"basicInformation\"\n            layout=\"vertical\"\n            initialValues={this.state}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n          >\n            <Row>\n              <Col xs={24} sm={24} md={24} lg={16}>\n                <Row gutter={ROW_GUTTER}>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.BIC\"} />}\n                      name=\"BIC\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your BIC!\",\n                        },\n                        // {\n                        //     pattern: /[A-Z]{4}-[A-Z]{2}-[0-9]{5}/,\n                        //     message:\n                        //         \"Invalid BIC format\",\n                        // },\n                      ]}\n                    >\n                      {/* <MaskedInput\n                                                mask=\"AAAA-AA-11111\"\n                                                onChange={\n                                                    this.props.onChangeMask\n                                                }\n                                            /> */}\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.Bank\"} />}\n                      name=\"Bank\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your bank!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={\n                        <IntlMessage id={\"account.company.CommercialName\"} />\n                      }\n                      name=\"CommercialName\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your commercial name!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.IBAN\"} />}\n                      name=\"IBAN\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your IBAN!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.IDNO\"} />}\n                      name=\"IDNO\"\n                      rules={[\n                        {\n                          required: true,\n                          message: (\n                            <IntlMessage id={\"auth.MessageInsertIDNO\"} />\n                          ),\n                        },\n                        {\n                          pattern: /^(\\d{13})?$/,\n                          message: <IntlMessage id={\"auth.IDNOValidation\"} />,\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={\n                        <IntlMessage id={\"account.company.JuridicalAddress\"} />\n                      }\n                      name=\"JuridicalAddress\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your juridical address!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={\n                        <IntlMessage id={\"account.company.JuridicalName\"} />\n                      }\n                      name=\"JuridicalName\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your juridical name!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.PhoneNumber\"} />}\n                      name=\"PhoneNumber\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your phone number!\",\n                        },\n                        {\n                          pattern: /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$/,\n                          message: \"Invalid phone format!\",\n                        },\n                      ]}\n                    >\n                      <MaskedInput\n                        mask=\"+(111) 111 111 11\"\n                        onChange={this.props.onChangeMask}\n                      />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={\n                        <IntlMessage id={\"account.company.OfficeAddress\"} />\n                      }\n                      name=\"OfficeAddress\"\n                      rules={[\n                        {\n                          required: true,\n                          message: \"Please input your office address!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.VATCode\"} />}\n                      name=\"VATCode\"\n                      rules={[\n                        {\n                          required: false,\n                          message: \"Please input your VAT code!\",\n                        },\n                        {\n                          pattern: /^[0-9]+$/,\n                          message: \"Invalid VAT code format!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.ShortName\"} />}\n                      name=\"ShortName\"\n                      rules={[\n                        {\n                          required: false,\n                          message: \"Please enter a short name!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.company.PostalCode\"} />}\n                      name=\"PostalCode\"\n                      rules={[\n                        {\n                          required: false,\n                          message: \"Please enter a postal code!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id={\"account.EditProfile.Email\"} />}\n                      name=\"Email\"\n                      rules={[\n                        {\n                          required: false,\n                          type: \"email\",\n                          message: \"Please enter a valid email!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                  <Col xs={24} sm={24} md={12}>\n                    <Form.Item\n                      label={<IntlMessage id=\"account.company.WebSite\" />}\n                      name=\"WebSite\"\n                      rules={[\n                        {\n                          required: false,\n                          message: \"Please input website!\",\n                        },\n                      ]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  </Col>\n                </Row>\n                <Button type=\"primary\" htmlType=\"submit\">\n                  <IntlMessage id={\"account.EditProfile.SaveChange\"} />\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateSettings,\n};\n\nexport default connect(null, mapDispatchToProps)(CompanyForm);\n","import React, { useState } from \"react\";\nimport CompanyForm from \"./CompanyForm\";\n\nconst Company = () => {\n  const [textMask, setTextMask] = useState<any>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const onChangeMask = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTextMask({ [e.target.name]: e.target.value });\n  };\n  return (\n    <CompanyForm\n      onChangeMask={onChangeMask}\n      loading={loading}\n      setLoading={setLoading}\n    />\n  );\n};\n\nexport default Company;\n"],"sourceRoot":""}